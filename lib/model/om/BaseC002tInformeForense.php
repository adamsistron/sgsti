<?php

/**
 * Base class that represents a row from the 'c002t_informe_forense' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Sat Nov 14 07:33:31 2015
 *
 * @package    lib.model.om
 */
abstract class BaseC002tInformeForense extends BaseObject  implements Persistent {


  const PEER = 'C002tInformeForensePeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        C002tInformeForensePeer
	 */
	protected static $peer;

	/**
	 * The value for the co_informe_forense field.
	 * @var        string
	 */
	protected $co_informe_forense;

	/**
	 * The value for the co_region field.
	 * @var        string
	 */
	protected $co_region;

	/**
	 * The value for the co_negocio field.
	 * @var        string
	 */
	protected $co_negocio;

	/**
	 * The value for the co_division field.
	 * @var        string
	 */
	protected $co_division;

	/**
	 * The value for the co_estado_informe field.
	 * @var        string
	 */
	protected $co_estado_informe;

	/**
	 * The value for the tx_serial field.
	 * @var        string
	 */
	protected $tx_serial;

	/**
	 * The value for the tx_titulo field.
	 * @var        string
	 */
	protected $tx_titulo;

	/**
	 * The value for the tx_descripcion_entorno field.
	 * @var        string
	 */
	protected $tx_descripcion_entorno;

	/**
	 * The value for the tx_resultados field.
	 * @var        string
	 */
	protected $tx_resultados;

	/**
	 * The value for the tx_conclusiones field.
	 * @var        string
	 */
	protected $tx_conclusiones;

	/**
	 * The value for the tx_observaciones field.
	 * @var        string
	 */
	protected $tx_observaciones;

	/**
	 * The value for the tx_ruta_pdf field.
	 * @var        string
	 */
	protected $tx_ruta_pdf;

	/**
	 * The value for the nb_archivo_pdf field.
	 * @var        string
	 */
	protected $nb_archivo_pdf;

	/**
	 * The value for the co_transaccion field.
	 * @var        string
	 */
	protected $co_transaccion;

	/**
	 * The value for the co_clasificacion field.
	 * @var        string
	 */
	protected $co_clasificacion;

	/**
	 * The value for the in_abierto field.
	 * @var        boolean
	 */
	protected $in_abierto;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the update_at field.
	 * @var        string
	 */
	protected $update_at;

	/**
	 * The value for the co_forense field.
	 * @var        string
	 */
	protected $co_forense;

	/**
	 * The value for the nb_archivo_soporte field.
	 * @var        string
	 */
	protected $nb_archivo_soporte;

	/**
	 * The value for the tx_ruta_soporte field.
	 * @var        string
	 */
	protected $tx_ruta_soporte;

	/**
	 * @var        J813tRegion
	 */
	protected $aJ813tRegion;

	/**
	 * @var        J814tNegocio
	 */
	protected $aJ814tNegocio;

	/**
	 * @var        J815tDivision
	 */
	protected $aJ815tDivision;

	/**
	 * @var        J803tEstadoInforme
	 */
	protected $aJ803tEstadoInforme;

	/**
	 * @var        C801tTransaccion
	 */
	protected $aC801tTransaccion;

	/**
	 * @var        J802tClasificacion
	 */
	protected $aJ802tClasificacion;

	/**
	 * @var        C001tForense
	 */
	protected $aC001tForense;

	/**
	 * @var        array C007tFigurasForense[] Collection to store aggregation of C007tFigurasForense objects.
	 */
	protected $collC007tFigurasForenses;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC007tFigurasForenses.
	 */
	private $lastC007tFigurasForenseCriteria = null;

	/**
	 * @var        array C008tAnexosForense[] Collection to store aggregation of C008tAnexosForense objects.
	 */
	protected $collC008tAnexosForenses;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC008tAnexosForenses.
	 */
	private $lastC008tAnexosForenseCriteria = null;

	/**
	 * @var        array C805tRelTransaccionPrincipio[] Collection to store aggregation of C805tRelTransaccionPrincipio objects.
	 */
	protected $collC805tRelTransaccionPrincipios;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC805tRelTransaccionPrincipios.
	 */
	private $lastC805tRelTransaccionPrincipioCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseC002tInformeForense object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [co_informe_forense] column value.
	 * 
	 * @return     string
	 */
	public function getCoInformeForense()
	{
		return $this->co_informe_forense;
	}

	/**
	 * Get the [co_region] column value.
	 * 
	 * @return     string
	 */
	public function getCoRegion()
	{
		return $this->co_region;
	}

	/**
	 * Get the [co_negocio] column value.
	 * 
	 * @return     string
	 */
	public function getCoNegocio()
	{
		return $this->co_negocio;
	}

	/**
	 * Get the [co_division] column value.
	 * 
	 * @return     string
	 */
	public function getCoDivision()
	{
		return $this->co_division;
	}

	/**
	 * Get the [co_estado_informe] column value.
	 * 
	 * @return     string
	 */
	public function getCoEstadoInforme()
	{
		return $this->co_estado_informe;
	}

	/**
	 * Get the [tx_serial] column value.
	 * 
	 * @return     string
	 */
	public function getTxSerial()
	{
		return $this->tx_serial;
	}

	/**
	 * Get the [tx_titulo] column value.
	 * 
	 * @return     string
	 */
	public function getTxTitulo()
	{
		return $this->tx_titulo;
	}

	/**
	 * Get the [tx_descripcion_entorno] column value.
	 * 
	 * @return     string
	 */
	public function getTxDescripcionEntorno()
	{
		return $this->tx_descripcion_entorno;
	}

	/**
	 * Get the [tx_resultados] column value.
	 * 
	 * @return     string
	 */
	public function getTxResultados()
	{
		return $this->tx_resultados;
	}

	/**
	 * Get the [tx_conclusiones] column value.
	 * 
	 * @return     string
	 */
	public function getTxConclusiones()
	{
		return $this->tx_conclusiones;
	}

	/**
	 * Get the [tx_observaciones] column value.
	 * 
	 * @return     string
	 */
	public function getTxObservaciones()
	{
		return $this->tx_observaciones;
	}

	/**
	 * Get the [tx_ruta_pdf] column value.
	 * 
	 * @return     string
	 */
	public function getTxRutaPdf()
	{
		return $this->tx_ruta_pdf;
	}

	/**
	 * Get the [nb_archivo_pdf] column value.
	 * 
	 * @return     string
	 */
	public function getNbArchivoPdf()
	{
		return $this->nb_archivo_pdf;
	}

	/**
	 * Get the [co_transaccion] column value.
	 * 
	 * @return     string
	 */
	public function getCoTransaccion()
	{
		return $this->co_transaccion;
	}

	/**
	 * Get the [co_clasificacion] column value.
	 * 
	 * @return     string
	 */
	public function getCoClasificacion()
	{
		return $this->co_clasificacion;
	}

	/**
	 * Get the [in_abierto] column value.
	 * 
	 * @return     boolean
	 */
	public function getInAbierto()
	{
		return $this->in_abierto;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [update_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdateAt($format = 'Y-m-d H:i:s')
	{
		if ($this->update_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->update_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->update_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [co_forense] column value.
	 * 
	 * @return     string
	 */
	public function getCoForense()
	{
		return $this->co_forense;
	}

	/**
	 * Get the [nb_archivo_soporte] column value.
	 * 
	 * @return     string
	 */
	public function getNbArchivoSoporte()
	{
		return $this->nb_archivo_soporte;
	}

	/**
	 * Get the [tx_ruta_soporte] column value.
	 * 
	 * @return     string
	 */
	public function getTxRutaSoporte()
	{
		return $this->tx_ruta_soporte;
	}

	/**
	 * Set the value of [co_informe_forense] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setCoInformeForense($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_informe_forense !== $v) {
			$this->co_informe_forense = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::CO_INFORME_FORENSE;
		}

		return $this;
	} // setCoInformeForense()

	/**
	 * Set the value of [co_region] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setCoRegion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_region !== $v) {
			$this->co_region = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::CO_REGION;
		}

		if ($this->aJ813tRegion !== null && $this->aJ813tRegion->getCoRegion() !== $v) {
			$this->aJ813tRegion = null;
		}

		return $this;
	} // setCoRegion()

	/**
	 * Set the value of [co_negocio] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setCoNegocio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_negocio !== $v) {
			$this->co_negocio = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::CO_NEGOCIO;
		}

		if ($this->aJ814tNegocio !== null && $this->aJ814tNegocio->getCoNegocio() !== $v) {
			$this->aJ814tNegocio = null;
		}

		return $this;
	} // setCoNegocio()

	/**
	 * Set the value of [co_division] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setCoDivision($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_division !== $v) {
			$this->co_division = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::CO_DIVISION;
		}

		if ($this->aJ815tDivision !== null && $this->aJ815tDivision->getCoDivision() !== $v) {
			$this->aJ815tDivision = null;
		}

		return $this;
	} // setCoDivision()

	/**
	 * Set the value of [co_estado_informe] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setCoEstadoInforme($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_estado_informe !== $v) {
			$this->co_estado_informe = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::CO_ESTADO_INFORME;
		}

		if ($this->aJ803tEstadoInforme !== null && $this->aJ803tEstadoInforme->getCoEstadoInforme() !== $v) {
			$this->aJ803tEstadoInforme = null;
		}

		return $this;
	} // setCoEstadoInforme()

	/**
	 * Set the value of [tx_serial] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setTxSerial($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_serial !== $v) {
			$this->tx_serial = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::TX_SERIAL;
		}

		return $this;
	} // setTxSerial()

	/**
	 * Set the value of [tx_titulo] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setTxTitulo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_titulo !== $v) {
			$this->tx_titulo = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::TX_TITULO;
		}

		return $this;
	} // setTxTitulo()

	/**
	 * Set the value of [tx_descripcion_entorno] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setTxDescripcionEntorno($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_descripcion_entorno !== $v) {
			$this->tx_descripcion_entorno = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::TX_DESCRIPCION_ENTORNO;
		}

		return $this;
	} // setTxDescripcionEntorno()

	/**
	 * Set the value of [tx_resultados] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setTxResultados($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_resultados !== $v) {
			$this->tx_resultados = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::TX_RESULTADOS;
		}

		return $this;
	} // setTxResultados()

	/**
	 * Set the value of [tx_conclusiones] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setTxConclusiones($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_conclusiones !== $v) {
			$this->tx_conclusiones = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::TX_CONCLUSIONES;
		}

		return $this;
	} // setTxConclusiones()

	/**
	 * Set the value of [tx_observaciones] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setTxObservaciones($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_observaciones !== $v) {
			$this->tx_observaciones = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::TX_OBSERVACIONES;
		}

		return $this;
	} // setTxObservaciones()

	/**
	 * Set the value of [tx_ruta_pdf] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setTxRutaPdf($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_ruta_pdf !== $v) {
			$this->tx_ruta_pdf = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::TX_RUTA_PDF;
		}

		return $this;
	} // setTxRutaPdf()

	/**
	 * Set the value of [nb_archivo_pdf] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setNbArchivoPdf($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nb_archivo_pdf !== $v) {
			$this->nb_archivo_pdf = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::NB_ARCHIVO_PDF;
		}

		return $this;
	} // setNbArchivoPdf()

	/**
	 * Set the value of [co_transaccion] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setCoTransaccion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_transaccion !== $v) {
			$this->co_transaccion = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::CO_TRANSACCION;
		}

		if ($this->aC801tTransaccion !== null && $this->aC801tTransaccion->getCoTransaccion() !== $v) {
			$this->aC801tTransaccion = null;
		}

		return $this;
	} // setCoTransaccion()

	/**
	 * Set the value of [co_clasificacion] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setCoClasificacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_clasificacion !== $v) {
			$this->co_clasificacion = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::CO_CLASIFICACION;
		}

		if ($this->aJ802tClasificacion !== null && $this->aJ802tClasificacion->getCoClasificacion() !== $v) {
			$this->aJ802tClasificacion = null;
		}

		return $this;
	} // setCoClasificacion()

	/**
	 * Set the value of [in_abierto] column.
	 * 
	 * @param      boolean $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setInAbierto($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->in_abierto !== $v) {
			$this->in_abierto = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::IN_ABIERTO;
		}

		return $this;
	} // setInAbierto()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d\\TH:i:sO') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d\\TH:i:sO') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d\\TH:i:sO') : null);
				$this->modifiedColumns[] = C002tInformeForensePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [update_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setUpdateAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->update_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->update_at !== null && $tmpDt = new DateTime($this->update_at)) ? $tmpDt->format('Y-m-d\\TH:i:sO') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d\\TH:i:sO') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->update_at = ($dt ? $dt->format('Y-m-d\\TH:i:sO') : null);
				$this->modifiedColumns[] = C002tInformeForensePeer::UPDATE_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdateAt()

	/**
	 * Set the value of [co_forense] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setCoForense($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_forense !== $v) {
			$this->co_forense = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::CO_FORENSE;
		}

		if ($this->aC001tForense !== null && $this->aC001tForense->getCoForense() !== $v) {
			$this->aC001tForense = null;
		}

		return $this;
	} // setCoForense()

	/**
	 * Set the value of [nb_archivo_soporte] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setNbArchivoSoporte($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nb_archivo_soporte !== $v) {
			$this->nb_archivo_soporte = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::NB_ARCHIVO_SOPORTE;
		}

		return $this;
	} // setNbArchivoSoporte()

	/**
	 * Set the value of [tx_ruta_soporte] column.
	 * 
	 * @param      string $v new value
	 * @return     C002tInformeForense The current object (for fluent API support)
	 */
	public function setTxRutaSoporte($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_ruta_soporte !== $v) {
			$this->tx_ruta_soporte = $v;
			$this->modifiedColumns[] = C002tInformeForensePeer::TX_RUTA_SOPORTE;
		}

		return $this;
	} // setTxRutaSoporte()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->co_informe_forense = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->co_region = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->co_negocio = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->co_division = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->co_estado_informe = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->tx_serial = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->tx_titulo = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->tx_descripcion_entorno = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->tx_resultados = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->tx_conclusiones = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->tx_observaciones = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->tx_ruta_pdf = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->nb_archivo_pdf = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->co_transaccion = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->co_clasificacion = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->in_abierto = ($row[$startcol + 15] !== null) ? (boolean) $row[$startcol + 15] : null;
			$this->created_at = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->update_at = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->co_forense = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->nb_archivo_soporte = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->tx_ruta_soporte = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 21; // 21 = C002tInformeForensePeer::NUM_COLUMNS - C002tInformeForensePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating C002tInformeForense object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aJ813tRegion !== null && $this->co_region !== $this->aJ813tRegion->getCoRegion()) {
			$this->aJ813tRegion = null;
		}
		if ($this->aJ814tNegocio !== null && $this->co_negocio !== $this->aJ814tNegocio->getCoNegocio()) {
			$this->aJ814tNegocio = null;
		}
		if ($this->aJ815tDivision !== null && $this->co_division !== $this->aJ815tDivision->getCoDivision()) {
			$this->aJ815tDivision = null;
		}
		if ($this->aJ803tEstadoInforme !== null && $this->co_estado_informe !== $this->aJ803tEstadoInforme->getCoEstadoInforme()) {
			$this->aJ803tEstadoInforme = null;
		}
		if ($this->aC801tTransaccion !== null && $this->co_transaccion !== $this->aC801tTransaccion->getCoTransaccion()) {
			$this->aC801tTransaccion = null;
		}
		if ($this->aJ802tClasificacion !== null && $this->co_clasificacion !== $this->aJ802tClasificacion->getCoClasificacion()) {
			$this->aJ802tClasificacion = null;
		}
		if ($this->aC001tForense !== null && $this->co_forense !== $this->aC001tForense->getCoForense()) {
			$this->aC001tForense = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(C002tInformeForensePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = C002tInformeForensePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aJ813tRegion = null;
			$this->aJ814tNegocio = null;
			$this->aJ815tDivision = null;
			$this->aJ803tEstadoInforme = null;
			$this->aC801tTransaccion = null;
			$this->aJ802tClasificacion = null;
			$this->aC001tForense = null;
			$this->collC007tFigurasForenses = null;
			$this->lastC007tFigurasForenseCriteria = null;

			$this->collC008tAnexosForenses = null;
			$this->lastC008tAnexosForenseCriteria = null;

			$this->collC805tRelTransaccionPrincipios = null;
			$this->lastC805tRelTransaccionPrincipioCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseC002tInformeForense:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(C002tInformeForensePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			C002tInformeForensePeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseC002tInformeForense:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseC002tInformeForense:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(C002tInformeForensePeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(C002tInformeForensePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseC002tInformeForense:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			C002tInformeForensePeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aJ813tRegion !== null) {
				if ($this->aJ813tRegion->isModified() || $this->aJ813tRegion->isNew()) {
					$affectedRows += $this->aJ813tRegion->save($con);
				}
				$this->setJ813tRegion($this->aJ813tRegion);
			}

			if ($this->aJ814tNegocio !== null) {
				if ($this->aJ814tNegocio->isModified() || $this->aJ814tNegocio->isNew()) {
					$affectedRows += $this->aJ814tNegocio->save($con);
				}
				$this->setJ814tNegocio($this->aJ814tNegocio);
			}

			if ($this->aJ815tDivision !== null) {
				if ($this->aJ815tDivision->isModified() || $this->aJ815tDivision->isNew()) {
					$affectedRows += $this->aJ815tDivision->save($con);
				}
				$this->setJ815tDivision($this->aJ815tDivision);
			}

			if ($this->aJ803tEstadoInforme !== null) {
				if ($this->aJ803tEstadoInforme->isModified() || $this->aJ803tEstadoInforme->isNew()) {
					$affectedRows += $this->aJ803tEstadoInforme->save($con);
				}
				$this->setJ803tEstadoInforme($this->aJ803tEstadoInforme);
			}

			if ($this->aC801tTransaccion !== null) {
				if ($this->aC801tTransaccion->isModified() || $this->aC801tTransaccion->isNew()) {
					$affectedRows += $this->aC801tTransaccion->save($con);
				}
				$this->setC801tTransaccion($this->aC801tTransaccion);
			}

			if ($this->aJ802tClasificacion !== null) {
				if ($this->aJ802tClasificacion->isModified() || $this->aJ802tClasificacion->isNew()) {
					$affectedRows += $this->aJ802tClasificacion->save($con);
				}
				$this->setJ802tClasificacion($this->aJ802tClasificacion);
			}

			if ($this->aC001tForense !== null) {
				if ($this->aC001tForense->isModified() || $this->aC001tForense->isNew()) {
					$affectedRows += $this->aC001tForense->save($con);
				}
				$this->setC001tForense($this->aC001tForense);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = C002tInformeForensePeer::CO_INFORME_FORENSE;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = C002tInformeForensePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setCoInformeForense($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += C002tInformeForensePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collC007tFigurasForenses !== null) {
				foreach ($this->collC007tFigurasForenses as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC008tAnexosForenses !== null) {
				foreach ($this->collC008tAnexosForenses as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC805tRelTransaccionPrincipios !== null) {
				foreach ($this->collC805tRelTransaccionPrincipios as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aJ813tRegion !== null) {
				if (!$this->aJ813tRegion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ813tRegion->getValidationFailures());
				}
			}

			if ($this->aJ814tNegocio !== null) {
				if (!$this->aJ814tNegocio->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ814tNegocio->getValidationFailures());
				}
			}

			if ($this->aJ815tDivision !== null) {
				if (!$this->aJ815tDivision->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ815tDivision->getValidationFailures());
				}
			}

			if ($this->aJ803tEstadoInforme !== null) {
				if (!$this->aJ803tEstadoInforme->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ803tEstadoInforme->getValidationFailures());
				}
			}

			if ($this->aC801tTransaccion !== null) {
				if (!$this->aC801tTransaccion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aC801tTransaccion->getValidationFailures());
				}
			}

			if ($this->aJ802tClasificacion !== null) {
				if (!$this->aJ802tClasificacion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ802tClasificacion->getValidationFailures());
				}
			}

			if ($this->aC001tForense !== null) {
				if (!$this->aC001tForense->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aC001tForense->getValidationFailures());
				}
			}


			if (($retval = C002tInformeForensePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collC007tFigurasForenses !== null) {
					foreach ($this->collC007tFigurasForenses as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC008tAnexosForenses !== null) {
					foreach ($this->collC008tAnexosForenses as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC805tRelTransaccionPrincipios !== null) {
					foreach ($this->collC805tRelTransaccionPrincipios as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = C002tInformeForensePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCoInformeForense();
				break;
			case 1:
				return $this->getCoRegion();
				break;
			case 2:
				return $this->getCoNegocio();
				break;
			case 3:
				return $this->getCoDivision();
				break;
			case 4:
				return $this->getCoEstadoInforme();
				break;
			case 5:
				return $this->getTxSerial();
				break;
			case 6:
				return $this->getTxTitulo();
				break;
			case 7:
				return $this->getTxDescripcionEntorno();
				break;
			case 8:
				return $this->getTxResultados();
				break;
			case 9:
				return $this->getTxConclusiones();
				break;
			case 10:
				return $this->getTxObservaciones();
				break;
			case 11:
				return $this->getTxRutaPdf();
				break;
			case 12:
				return $this->getNbArchivoPdf();
				break;
			case 13:
				return $this->getCoTransaccion();
				break;
			case 14:
				return $this->getCoClasificacion();
				break;
			case 15:
				return $this->getInAbierto();
				break;
			case 16:
				return $this->getCreatedAt();
				break;
			case 17:
				return $this->getUpdateAt();
				break;
			case 18:
				return $this->getCoForense();
				break;
			case 19:
				return $this->getNbArchivoSoporte();
				break;
			case 20:
				return $this->getTxRutaSoporte();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = C002tInformeForensePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCoInformeForense(),
			$keys[1] => $this->getCoRegion(),
			$keys[2] => $this->getCoNegocio(),
			$keys[3] => $this->getCoDivision(),
			$keys[4] => $this->getCoEstadoInforme(),
			$keys[5] => $this->getTxSerial(),
			$keys[6] => $this->getTxTitulo(),
			$keys[7] => $this->getTxDescripcionEntorno(),
			$keys[8] => $this->getTxResultados(),
			$keys[9] => $this->getTxConclusiones(),
			$keys[10] => $this->getTxObservaciones(),
			$keys[11] => $this->getTxRutaPdf(),
			$keys[12] => $this->getNbArchivoPdf(),
			$keys[13] => $this->getCoTransaccion(),
			$keys[14] => $this->getCoClasificacion(),
			$keys[15] => $this->getInAbierto(),
			$keys[16] => $this->getCreatedAt(),
			$keys[17] => $this->getUpdateAt(),
			$keys[18] => $this->getCoForense(),
			$keys[19] => $this->getNbArchivoSoporte(),
			$keys[20] => $this->getTxRutaSoporte(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = C002tInformeForensePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCoInformeForense($value);
				break;
			case 1:
				$this->setCoRegion($value);
				break;
			case 2:
				$this->setCoNegocio($value);
				break;
			case 3:
				$this->setCoDivision($value);
				break;
			case 4:
				$this->setCoEstadoInforme($value);
				break;
			case 5:
				$this->setTxSerial($value);
				break;
			case 6:
				$this->setTxTitulo($value);
				break;
			case 7:
				$this->setTxDescripcionEntorno($value);
				break;
			case 8:
				$this->setTxResultados($value);
				break;
			case 9:
				$this->setTxConclusiones($value);
				break;
			case 10:
				$this->setTxObservaciones($value);
				break;
			case 11:
				$this->setTxRutaPdf($value);
				break;
			case 12:
				$this->setNbArchivoPdf($value);
				break;
			case 13:
				$this->setCoTransaccion($value);
				break;
			case 14:
				$this->setCoClasificacion($value);
				break;
			case 15:
				$this->setInAbierto($value);
				break;
			case 16:
				$this->setCreatedAt($value);
				break;
			case 17:
				$this->setUpdateAt($value);
				break;
			case 18:
				$this->setCoForense($value);
				break;
			case 19:
				$this->setNbArchivoSoporte($value);
				break;
			case 20:
				$this->setTxRutaSoporte($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = C002tInformeForensePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCoInformeForense($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCoRegion($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCoNegocio($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCoDivision($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCoEstadoInforme($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTxSerial($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTxTitulo($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setTxDescripcionEntorno($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setTxResultados($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTxConclusiones($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setTxObservaciones($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setTxRutaPdf($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setNbArchivoPdf($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCoTransaccion($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCoClasificacion($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setInAbierto($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCreatedAt($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setUpdateAt($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCoForense($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setNbArchivoSoporte($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setTxRutaSoporte($arr[$keys[20]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(C002tInformeForensePeer::DATABASE_NAME);

		if ($this->isColumnModified(C002tInformeForensePeer::CO_INFORME_FORENSE)) $criteria->add(C002tInformeForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);
		if ($this->isColumnModified(C002tInformeForensePeer::CO_REGION)) $criteria->add(C002tInformeForensePeer::CO_REGION, $this->co_region);
		if ($this->isColumnModified(C002tInformeForensePeer::CO_NEGOCIO)) $criteria->add(C002tInformeForensePeer::CO_NEGOCIO, $this->co_negocio);
		if ($this->isColumnModified(C002tInformeForensePeer::CO_DIVISION)) $criteria->add(C002tInformeForensePeer::CO_DIVISION, $this->co_division);
		if ($this->isColumnModified(C002tInformeForensePeer::CO_ESTADO_INFORME)) $criteria->add(C002tInformeForensePeer::CO_ESTADO_INFORME, $this->co_estado_informe);
		if ($this->isColumnModified(C002tInformeForensePeer::TX_SERIAL)) $criteria->add(C002tInformeForensePeer::TX_SERIAL, $this->tx_serial);
		if ($this->isColumnModified(C002tInformeForensePeer::TX_TITULO)) $criteria->add(C002tInformeForensePeer::TX_TITULO, $this->tx_titulo);
		if ($this->isColumnModified(C002tInformeForensePeer::TX_DESCRIPCION_ENTORNO)) $criteria->add(C002tInformeForensePeer::TX_DESCRIPCION_ENTORNO, $this->tx_descripcion_entorno);
		if ($this->isColumnModified(C002tInformeForensePeer::TX_RESULTADOS)) $criteria->add(C002tInformeForensePeer::TX_RESULTADOS, $this->tx_resultados);
		if ($this->isColumnModified(C002tInformeForensePeer::TX_CONCLUSIONES)) $criteria->add(C002tInformeForensePeer::TX_CONCLUSIONES, $this->tx_conclusiones);
		if ($this->isColumnModified(C002tInformeForensePeer::TX_OBSERVACIONES)) $criteria->add(C002tInformeForensePeer::TX_OBSERVACIONES, $this->tx_observaciones);
		if ($this->isColumnModified(C002tInformeForensePeer::TX_RUTA_PDF)) $criteria->add(C002tInformeForensePeer::TX_RUTA_PDF, $this->tx_ruta_pdf);
		if ($this->isColumnModified(C002tInformeForensePeer::NB_ARCHIVO_PDF)) $criteria->add(C002tInformeForensePeer::NB_ARCHIVO_PDF, $this->nb_archivo_pdf);
		if ($this->isColumnModified(C002tInformeForensePeer::CO_TRANSACCION)) $criteria->add(C002tInformeForensePeer::CO_TRANSACCION, $this->co_transaccion);
		if ($this->isColumnModified(C002tInformeForensePeer::CO_CLASIFICACION)) $criteria->add(C002tInformeForensePeer::CO_CLASIFICACION, $this->co_clasificacion);
		if ($this->isColumnModified(C002tInformeForensePeer::IN_ABIERTO)) $criteria->add(C002tInformeForensePeer::IN_ABIERTO, $this->in_abierto);
		if ($this->isColumnModified(C002tInformeForensePeer::CREATED_AT)) $criteria->add(C002tInformeForensePeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(C002tInformeForensePeer::UPDATE_AT)) $criteria->add(C002tInformeForensePeer::UPDATE_AT, $this->update_at);
		if ($this->isColumnModified(C002tInformeForensePeer::CO_FORENSE)) $criteria->add(C002tInformeForensePeer::CO_FORENSE, $this->co_forense);
		if ($this->isColumnModified(C002tInformeForensePeer::NB_ARCHIVO_SOPORTE)) $criteria->add(C002tInformeForensePeer::NB_ARCHIVO_SOPORTE, $this->nb_archivo_soporte);
		if ($this->isColumnModified(C002tInformeForensePeer::TX_RUTA_SOPORTE)) $criteria->add(C002tInformeForensePeer::TX_RUTA_SOPORTE, $this->tx_ruta_soporte);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(C002tInformeForensePeer::DATABASE_NAME);

		$criteria->add(C002tInformeForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getCoInformeForense();
	}

	/**
	 * Generic method to set the primary key (co_informe_forense column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCoInformeForense($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of C002tInformeForense (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCoRegion($this->co_region);

		$copyObj->setCoNegocio($this->co_negocio);

		$copyObj->setCoDivision($this->co_division);

		$copyObj->setCoEstadoInforme($this->co_estado_informe);

		$copyObj->setTxSerial($this->tx_serial);

		$copyObj->setTxTitulo($this->tx_titulo);

		$copyObj->setTxDescripcionEntorno($this->tx_descripcion_entorno);

		$copyObj->setTxResultados($this->tx_resultados);

		$copyObj->setTxConclusiones($this->tx_conclusiones);

		$copyObj->setTxObservaciones($this->tx_observaciones);

		$copyObj->setTxRutaPdf($this->tx_ruta_pdf);

		$copyObj->setNbArchivoPdf($this->nb_archivo_pdf);

		$copyObj->setCoTransaccion($this->co_transaccion);

		$copyObj->setCoClasificacion($this->co_clasificacion);

		$copyObj->setInAbierto($this->in_abierto);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdateAt($this->update_at);

		$copyObj->setCoForense($this->co_forense);

		$copyObj->setNbArchivoSoporte($this->nb_archivo_soporte);

		$copyObj->setTxRutaSoporte($this->tx_ruta_soporte);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getC007tFigurasForenses() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC007tFigurasForense($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC008tAnexosForenses() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC008tAnexosForense($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC805tRelTransaccionPrincipios() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC805tRelTransaccionPrincipio($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setCoInformeForense(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     C002tInformeForense Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     C002tInformeForensePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new C002tInformeForensePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a J813tRegion object.
	 *
	 * @param      J813tRegion $v
	 * @return     C002tInformeForense The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ813tRegion(J813tRegion $v = null)
	{
		if ($v === null) {
			$this->setCoRegion(NULL);
		} else {
			$this->setCoRegion($v->getCoRegion());
		}

		$this->aJ813tRegion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J813tRegion object, it will not be re-added.
		if ($v !== null) {
			$v->addC002tInformeForense($this);
		}

		return $this;
	}


	/**
	 * Get the associated J813tRegion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J813tRegion The associated J813tRegion object.
	 * @throws     PropelException
	 */
	public function getJ813tRegion(PropelPDO $con = null)
	{
		if ($this->aJ813tRegion === null && (($this->co_region !== "" && $this->co_region !== null))) {
			$c = new Criteria(J813tRegionPeer::DATABASE_NAME);
			$c->add(J813tRegionPeer::CO_REGION, $this->co_region);
			$this->aJ813tRegion = J813tRegionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ813tRegion->addC002tInformeForenses($this);
			 */
		}
		return $this->aJ813tRegion;
	}

	/**
	 * Declares an association between this object and a J814tNegocio object.
	 *
	 * @param      J814tNegocio $v
	 * @return     C002tInformeForense The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ814tNegocio(J814tNegocio $v = null)
	{
		if ($v === null) {
			$this->setCoNegocio(NULL);
		} else {
			$this->setCoNegocio($v->getCoNegocio());
		}

		$this->aJ814tNegocio = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J814tNegocio object, it will not be re-added.
		if ($v !== null) {
			$v->addC002tInformeForense($this);
		}

		return $this;
	}


	/**
	 * Get the associated J814tNegocio object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J814tNegocio The associated J814tNegocio object.
	 * @throws     PropelException
	 */
	public function getJ814tNegocio(PropelPDO $con = null)
	{
		if ($this->aJ814tNegocio === null && (($this->co_negocio !== "" && $this->co_negocio !== null))) {
			$c = new Criteria(J814tNegocioPeer::DATABASE_NAME);
			$c->add(J814tNegocioPeer::CO_NEGOCIO, $this->co_negocio);
			$this->aJ814tNegocio = J814tNegocioPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ814tNegocio->addC002tInformeForenses($this);
			 */
		}
		return $this->aJ814tNegocio;
	}

	/**
	 * Declares an association between this object and a J815tDivision object.
	 *
	 * @param      J815tDivision $v
	 * @return     C002tInformeForense The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ815tDivision(J815tDivision $v = null)
	{
		if ($v === null) {
			$this->setCoDivision(NULL);
		} else {
			$this->setCoDivision($v->getCoDivision());
		}

		$this->aJ815tDivision = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J815tDivision object, it will not be re-added.
		if ($v !== null) {
			$v->addC002tInformeForense($this);
		}

		return $this;
	}


	/**
	 * Get the associated J815tDivision object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J815tDivision The associated J815tDivision object.
	 * @throws     PropelException
	 */
	public function getJ815tDivision(PropelPDO $con = null)
	{
		if ($this->aJ815tDivision === null && (($this->co_division !== "" && $this->co_division !== null))) {
			$c = new Criteria(J815tDivisionPeer::DATABASE_NAME);
			$c->add(J815tDivisionPeer::CO_DIVISION, $this->co_division);
			$this->aJ815tDivision = J815tDivisionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ815tDivision->addC002tInformeForenses($this);
			 */
		}
		return $this->aJ815tDivision;
	}

	/**
	 * Declares an association between this object and a J803tEstadoInforme object.
	 *
	 * @param      J803tEstadoInforme $v
	 * @return     C002tInformeForense The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ803tEstadoInforme(J803tEstadoInforme $v = null)
	{
		if ($v === null) {
			$this->setCoEstadoInforme(NULL);
		} else {
			$this->setCoEstadoInforme($v->getCoEstadoInforme());
		}

		$this->aJ803tEstadoInforme = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J803tEstadoInforme object, it will not be re-added.
		if ($v !== null) {
			$v->addC002tInformeForense($this);
		}

		return $this;
	}


	/**
	 * Get the associated J803tEstadoInforme object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J803tEstadoInforme The associated J803tEstadoInforme object.
	 * @throws     PropelException
	 */
	public function getJ803tEstadoInforme(PropelPDO $con = null)
	{
		if ($this->aJ803tEstadoInforme === null && (($this->co_estado_informe !== "" && $this->co_estado_informe !== null))) {
			$c = new Criteria(J803tEstadoInformePeer::DATABASE_NAME);
			$c->add(J803tEstadoInformePeer::CO_ESTADO_INFORME, $this->co_estado_informe);
			$this->aJ803tEstadoInforme = J803tEstadoInformePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ803tEstadoInforme->addC002tInformeForenses($this);
			 */
		}
		return $this->aJ803tEstadoInforme;
	}

	/**
	 * Declares an association between this object and a C801tTransaccion object.
	 *
	 * @param      C801tTransaccion $v
	 * @return     C002tInformeForense The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setC801tTransaccion(C801tTransaccion $v = null)
	{
		if ($v === null) {
			$this->setCoTransaccion(NULL);
		} else {
			$this->setCoTransaccion($v->getCoTransaccion());
		}

		$this->aC801tTransaccion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the C801tTransaccion object, it will not be re-added.
		if ($v !== null) {
			$v->addC002tInformeForense($this);
		}

		return $this;
	}


	/**
	 * Get the associated C801tTransaccion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     C801tTransaccion The associated C801tTransaccion object.
	 * @throws     PropelException
	 */
	public function getC801tTransaccion(PropelPDO $con = null)
	{
		if ($this->aC801tTransaccion === null && (($this->co_transaccion !== "" && $this->co_transaccion !== null))) {
			$c = new Criteria(C801tTransaccionPeer::DATABASE_NAME);
			$c->add(C801tTransaccionPeer::CO_TRANSACCION, $this->co_transaccion);
			$this->aC801tTransaccion = C801tTransaccionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aC801tTransaccion->addC002tInformeForenses($this);
			 */
		}
		return $this->aC801tTransaccion;
	}

	/**
	 * Declares an association between this object and a J802tClasificacion object.
	 *
	 * @param      J802tClasificacion $v
	 * @return     C002tInformeForense The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ802tClasificacion(J802tClasificacion $v = null)
	{
		if ($v === null) {
			$this->setCoClasificacion(NULL);
		} else {
			$this->setCoClasificacion($v->getCoClasificacion());
		}

		$this->aJ802tClasificacion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J802tClasificacion object, it will not be re-added.
		if ($v !== null) {
			$v->addC002tInformeForense($this);
		}

		return $this;
	}


	/**
	 * Get the associated J802tClasificacion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J802tClasificacion The associated J802tClasificacion object.
	 * @throws     PropelException
	 */
	public function getJ802tClasificacion(PropelPDO $con = null)
	{
		if ($this->aJ802tClasificacion === null && (($this->co_clasificacion !== "" && $this->co_clasificacion !== null))) {
			$c = new Criteria(J802tClasificacionPeer::DATABASE_NAME);
			$c->add(J802tClasificacionPeer::CO_CLASIFICACION, $this->co_clasificacion);
			$this->aJ802tClasificacion = J802tClasificacionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ802tClasificacion->addC002tInformeForenses($this);
			 */
		}
		return $this->aJ802tClasificacion;
	}

	/**
	 * Declares an association between this object and a C001tForense object.
	 *
	 * @param      C001tForense $v
	 * @return     C002tInformeForense The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setC001tForense(C001tForense $v = null)
	{
		if ($v === null) {
			$this->setCoForense(NULL);
		} else {
			$this->setCoForense($v->getCoForense());
		}

		$this->aC001tForense = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the C001tForense object, it will not be re-added.
		if ($v !== null) {
			$v->addC002tInformeForense($this);
		}

		return $this;
	}


	/**
	 * Get the associated C001tForense object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     C001tForense The associated C001tForense object.
	 * @throws     PropelException
	 */
	public function getC001tForense(PropelPDO $con = null)
	{
		if ($this->aC001tForense === null && (($this->co_forense !== "" && $this->co_forense !== null))) {
			$c = new Criteria(C001tForensePeer::DATABASE_NAME);
			$c->add(C001tForensePeer::CO_FORENSE, $this->co_forense);
			$this->aC001tForense = C001tForensePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aC001tForense->addC002tInformeForenses($this);
			 */
		}
		return $this->aC001tForense;
	}

	/**
	 * Clears out the collC007tFigurasForenses collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC007tFigurasForenses()
	 */
	public function clearC007tFigurasForenses()
	{
		$this->collC007tFigurasForenses = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC007tFigurasForenses collection (array).
	 *
	 * By default this just sets the collC007tFigurasForenses collection to an empty array (like clearcollC007tFigurasForenses());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC007tFigurasForenses()
	{
		$this->collC007tFigurasForenses = array();
	}

	/**
	 * Gets an array of C007tFigurasForense objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this C002tInformeForense has previously been saved, it will retrieve
	 * related C007tFigurasForenses from storage. If this C002tInformeForense is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C007tFigurasForense[]
	 * @throws     PropelException
	 */
	public function getC007tFigurasForenses($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(C002tInformeForensePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC007tFigurasForenses === null) {
			if ($this->isNew()) {
			   $this->collC007tFigurasForenses = array();
			} else {

				$criteria->add(C007tFigurasForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

				C007tFigurasForensePeer::addSelectColumns($criteria);
				$this->collC007tFigurasForenses = C007tFigurasForensePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C007tFigurasForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

				C007tFigurasForensePeer::addSelectColumns($criteria);
				if (!isset($this->lastC007tFigurasForenseCriteria) || !$this->lastC007tFigurasForenseCriteria->equals($criteria)) {
					$this->collC007tFigurasForenses = C007tFigurasForensePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC007tFigurasForenseCriteria = $criteria;
		return $this->collC007tFigurasForenses;
	}

	/**
	 * Returns the number of related C007tFigurasForense objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C007tFigurasForense objects.
	 * @throws     PropelException
	 */
	public function countC007tFigurasForenses(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(C002tInformeForensePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC007tFigurasForenses === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C007tFigurasForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

				$count = C007tFigurasForensePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C007tFigurasForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

				if (!isset($this->lastC007tFigurasForenseCriteria) || !$this->lastC007tFigurasForenseCriteria->equals($criteria)) {
					$count = C007tFigurasForensePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC007tFigurasForenses);
				}
			} else {
				$count = count($this->collC007tFigurasForenses);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C007tFigurasForense object to this object
	 * through the C007tFigurasForense foreign key attribute.
	 *
	 * @param      C007tFigurasForense $l C007tFigurasForense
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC007tFigurasForense(C007tFigurasForense $l)
	{
		if ($this->collC007tFigurasForenses === null) {
			$this->initC007tFigurasForenses();
		}
		if (!in_array($l, $this->collC007tFigurasForenses, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC007tFigurasForenses, $l);
			$l->setC002tInformeForense($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this C002tInformeForense is new, it will return
	 * an empty collection; or if this C002tInformeForense has previously
	 * been saved, it will retrieve related C007tFigurasForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in C002tInformeForense.
	 */
	public function getC007tFigurasForensesJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(C002tInformeForensePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC007tFigurasForenses === null) {
			if ($this->isNew()) {
				$this->collC007tFigurasForenses = array();
			} else {

				$criteria->add(C007tFigurasForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

				$this->collC007tFigurasForenses = C007tFigurasForensePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C007tFigurasForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

			if (!isset($this->lastC007tFigurasForenseCriteria) || !$this->lastC007tFigurasForenseCriteria->equals($criteria)) {
				$this->collC007tFigurasForenses = C007tFigurasForensePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC007tFigurasForenseCriteria = $criteria;

		return $this->collC007tFigurasForenses;
	}

	/**
	 * Clears out the collC008tAnexosForenses collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC008tAnexosForenses()
	 */
	public function clearC008tAnexosForenses()
	{
		$this->collC008tAnexosForenses = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC008tAnexosForenses collection (array).
	 *
	 * By default this just sets the collC008tAnexosForenses collection to an empty array (like clearcollC008tAnexosForenses());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC008tAnexosForenses()
	{
		$this->collC008tAnexosForenses = array();
	}

	/**
	 * Gets an array of C008tAnexosForense objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this C002tInformeForense has previously been saved, it will retrieve
	 * related C008tAnexosForenses from storage. If this C002tInformeForense is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C008tAnexosForense[]
	 * @throws     PropelException
	 */
	public function getC008tAnexosForenses($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(C002tInformeForensePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC008tAnexosForenses === null) {
			if ($this->isNew()) {
			   $this->collC008tAnexosForenses = array();
			} else {

				$criteria->add(C008tAnexosForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

				C008tAnexosForensePeer::addSelectColumns($criteria);
				$this->collC008tAnexosForenses = C008tAnexosForensePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C008tAnexosForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

				C008tAnexosForensePeer::addSelectColumns($criteria);
				if (!isset($this->lastC008tAnexosForenseCriteria) || !$this->lastC008tAnexosForenseCriteria->equals($criteria)) {
					$this->collC008tAnexosForenses = C008tAnexosForensePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC008tAnexosForenseCriteria = $criteria;
		return $this->collC008tAnexosForenses;
	}

	/**
	 * Returns the number of related C008tAnexosForense objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C008tAnexosForense objects.
	 * @throws     PropelException
	 */
	public function countC008tAnexosForenses(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(C002tInformeForensePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC008tAnexosForenses === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C008tAnexosForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

				$count = C008tAnexosForensePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C008tAnexosForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

				if (!isset($this->lastC008tAnexosForenseCriteria) || !$this->lastC008tAnexosForenseCriteria->equals($criteria)) {
					$count = C008tAnexosForensePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC008tAnexosForenses);
				}
			} else {
				$count = count($this->collC008tAnexosForenses);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C008tAnexosForense object to this object
	 * through the C008tAnexosForense foreign key attribute.
	 *
	 * @param      C008tAnexosForense $l C008tAnexosForense
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC008tAnexosForense(C008tAnexosForense $l)
	{
		if ($this->collC008tAnexosForenses === null) {
			$this->initC008tAnexosForenses();
		}
		if (!in_array($l, $this->collC008tAnexosForenses, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC008tAnexosForenses, $l);
			$l->setC002tInformeForense($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this C002tInformeForense is new, it will return
	 * an empty collection; or if this C002tInformeForense has previously
	 * been saved, it will retrieve related C008tAnexosForenses from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in C002tInformeForense.
	 */
	public function getC008tAnexosForensesJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(C002tInformeForensePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC008tAnexosForenses === null) {
			if ($this->isNew()) {
				$this->collC008tAnexosForenses = array();
			} else {

				$criteria->add(C008tAnexosForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

				$this->collC008tAnexosForenses = C008tAnexosForensePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C008tAnexosForensePeer::CO_INFORME_FORENSE, $this->co_informe_forense);

			if (!isset($this->lastC008tAnexosForenseCriteria) || !$this->lastC008tAnexosForenseCriteria->equals($criteria)) {
				$this->collC008tAnexosForenses = C008tAnexosForensePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC008tAnexosForenseCriteria = $criteria;

		return $this->collC008tAnexosForenses;
	}

	/**
	 * Clears out the collC805tRelTransaccionPrincipios collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC805tRelTransaccionPrincipios()
	 */
	public function clearC805tRelTransaccionPrincipios()
	{
		$this->collC805tRelTransaccionPrincipios = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC805tRelTransaccionPrincipios collection (array).
	 *
	 * By default this just sets the collC805tRelTransaccionPrincipios collection to an empty array (like clearcollC805tRelTransaccionPrincipios());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC805tRelTransaccionPrincipios()
	{
		$this->collC805tRelTransaccionPrincipios = array();
	}

	/**
	 * Gets an array of C805tRelTransaccionPrincipio objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this C002tInformeForense has previously been saved, it will retrieve
	 * related C805tRelTransaccionPrincipios from storage. If this C002tInformeForense is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C805tRelTransaccionPrincipio[]
	 * @throws     PropelException
	 */
	public function getC805tRelTransaccionPrincipios($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(C002tInformeForensePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC805tRelTransaccionPrincipios === null) {
			if ($this->isNew()) {
			   $this->collC805tRelTransaccionPrincipios = array();
			} else {

				$criteria->add(C805tRelTransaccionPrincipioPeer::CO_TRANSACCION, $this->co_informe_forense);

				C805tRelTransaccionPrincipioPeer::addSelectColumns($criteria);
				$this->collC805tRelTransaccionPrincipios = C805tRelTransaccionPrincipioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C805tRelTransaccionPrincipioPeer::CO_TRANSACCION, $this->co_informe_forense);

				C805tRelTransaccionPrincipioPeer::addSelectColumns($criteria);
				if (!isset($this->lastC805tRelTransaccionPrincipioCriteria) || !$this->lastC805tRelTransaccionPrincipioCriteria->equals($criteria)) {
					$this->collC805tRelTransaccionPrincipios = C805tRelTransaccionPrincipioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC805tRelTransaccionPrincipioCriteria = $criteria;
		return $this->collC805tRelTransaccionPrincipios;
	}

	/**
	 * Returns the number of related C805tRelTransaccionPrincipio objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C805tRelTransaccionPrincipio objects.
	 * @throws     PropelException
	 */
	public function countC805tRelTransaccionPrincipios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(C002tInformeForensePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC805tRelTransaccionPrincipios === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C805tRelTransaccionPrincipioPeer::CO_TRANSACCION, $this->co_informe_forense);

				$count = C805tRelTransaccionPrincipioPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C805tRelTransaccionPrincipioPeer::CO_TRANSACCION, $this->co_informe_forense);

				if (!isset($this->lastC805tRelTransaccionPrincipioCriteria) || !$this->lastC805tRelTransaccionPrincipioCriteria->equals($criteria)) {
					$count = C805tRelTransaccionPrincipioPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC805tRelTransaccionPrincipios);
				}
			} else {
				$count = count($this->collC805tRelTransaccionPrincipios);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C805tRelTransaccionPrincipio object to this object
	 * through the C805tRelTransaccionPrincipio foreign key attribute.
	 *
	 * @param      C805tRelTransaccionPrincipio $l C805tRelTransaccionPrincipio
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC805tRelTransaccionPrincipio(C805tRelTransaccionPrincipio $l)
	{
		if ($this->collC805tRelTransaccionPrincipios === null) {
			$this->initC805tRelTransaccionPrincipios();
		}
		if (!in_array($l, $this->collC805tRelTransaccionPrincipios, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC805tRelTransaccionPrincipios, $l);
			$l->setC002tInformeForense($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this C002tInformeForense is new, it will return
	 * an empty collection; or if this C002tInformeForense has previously
	 * been saved, it will retrieve related C805tRelTransaccionPrincipios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in C002tInformeForense.
	 */
	public function getC805tRelTransaccionPrincipiosJoinJ801tPrincipio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(C002tInformeForensePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC805tRelTransaccionPrincipios === null) {
			if ($this->isNew()) {
				$this->collC805tRelTransaccionPrincipios = array();
			} else {

				$criteria->add(C805tRelTransaccionPrincipioPeer::CO_TRANSACCION, $this->co_informe_forense);

				$this->collC805tRelTransaccionPrincipios = C805tRelTransaccionPrincipioPeer::doSelectJoinJ801tPrincipio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C805tRelTransaccionPrincipioPeer::CO_TRANSACCION, $this->co_informe_forense);

			if (!isset($this->lastC805tRelTransaccionPrincipioCriteria) || !$this->lastC805tRelTransaccionPrincipioCriteria->equals($criteria)) {
				$this->collC805tRelTransaccionPrincipios = C805tRelTransaccionPrincipioPeer::doSelectJoinJ801tPrincipio($criteria, $con, $join_behavior);
			}
		}
		$this->lastC805tRelTransaccionPrincipioCriteria = $criteria;

		return $this->collC805tRelTransaccionPrincipios;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collC007tFigurasForenses) {
				foreach ((array) $this->collC007tFigurasForenses as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC008tAnexosForenses) {
				foreach ((array) $this->collC008tAnexosForenses as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC805tRelTransaccionPrincipios) {
				foreach ((array) $this->collC805tRelTransaccionPrincipios as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collC007tFigurasForenses = null;
		$this->collC008tAnexosForenses = null;
		$this->collC805tRelTransaccionPrincipios = null;
			$this->aJ813tRegion = null;
			$this->aJ814tNegocio = null;
			$this->aJ815tDivision = null;
			$this->aJ803tEstadoInforme = null;
			$this->aC801tTransaccion = null;
			$this->aJ802tClasificacion = null;
			$this->aC001tForense = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseC002tInformeForense:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseC002tInformeForense::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseC002tInformeForense
