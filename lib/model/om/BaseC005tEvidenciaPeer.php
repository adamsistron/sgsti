<?php

/**
 * Base static class for performing query and update operations on the 'c005t_evidencia' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Thu Oct  1 13:19:45 2015
 *
 * @package    lib.model.om
 */
abstract class BaseC005tEvidenciaPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'c005t_evidencia';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.C005tEvidencia';

	/** The total number of columns. */
	const NUM_COLUMNS = 22;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the CO_EVIDENCIA field */
	const CO_EVIDENCIA = 'c005t_evidencia.CO_EVIDENCIA';

	/** the column name for the FE_REGISTRO field */
	const FE_REGISTRO = 'c005t_evidencia.FE_REGISTRO';

	/** the column name for the CO_REGISTRO field */
	const CO_REGISTRO = 'c005t_evidencia.CO_REGISTRO';

	/** the column name for the CO_ACC field */
	const CO_ACC = 'c005t_evidencia.CO_ACC';

	/** the column name for the CO_AIE field */
	const CO_AIE = 'c005t_evidencia.CO_AIE';

	/** the column name for the TX_DESCRIPCION_COLECCION field */
	const TX_DESCRIPCION_COLECCION = 'c005t_evidencia.TX_DESCRIPCION_COLECCION';

	/** the column name for the FE_COLECCION_EVIDENCIA field */
	const FE_COLECCION_EVIDENCIA = 'c005t_evidencia.FE_COLECCION_EVIDENCIA';

	/** the column name for the CO_COLECTA field */
	const CO_COLECTA = 'c005t_evidencia.CO_COLECTA';

	/** the column name for the CO_RECURSO field */
	const CO_RECURSO = 'c005t_evidencia.CO_RECURSO';

	/** the column name for the TX_NOMBRE_RECURSO field */
	const TX_NOMBRE_RECURSO = 'c005t_evidencia.TX_NOMBRE_RECURSO';

	/** the column name for the TX_SERIAL_RECURSO field */
	const TX_SERIAL_RECURSO = 'c005t_evidencia.TX_SERIAL_RECURSO';

	/** the column name for the TX_MARCA_RECURSO field */
	const TX_MARCA_RECURSO = 'c005t_evidencia.TX_MARCA_RECURSO';

	/** the column name for the TX_MODELO_RECURSO field */
	const TX_MODELO_RECURSO = 'c005t_evidencia.TX_MODELO_RECURSO';

	/** the column name for the TX_NUMERO_ACTIVO field */
	const TX_NUMERO_ACTIVO = 'c005t_evidencia.TX_NUMERO_ACTIVO';

	/** the column name for the CO_TIPO_EVIDENCIA field */
	const CO_TIPO_EVIDENCIA = 'c005t_evidencia.CO_TIPO_EVIDENCIA';

	/** the column name for the CO_ESTADO_EVIDENCIA field */
	const CO_ESTADO_EVIDENCIA = 'c005t_evidencia.CO_ESTADO_EVIDENCIA';

	/** the column name for the CO_LUGAR_SEGURO field */
	const CO_LUGAR_SEGURO = 'c005t_evidencia.CO_LUGAR_SEGURO';

	/** the column name for the CO_REPOSITORIO field */
	const CO_REPOSITORIO = 'c005t_evidencia.CO_REPOSITORIO';

	/** the column name for the CO_CUSTODIO_STI field */
	const CO_CUSTODIO_STI = 'c005t_evidencia.CO_CUSTODIO_STI';

	/** the column name for the TX_OBSERVACIONES field */
	const TX_OBSERVACIONES = 'c005t_evidencia.TX_OBSERVACIONES';

	/** the column name for the TX_CLASIFICACION field */
	const TX_CLASIFICACION = 'c005t_evidencia.TX_CLASIFICACION';

	/** the column name for the ID field */
	const ID = 'c005t_evidencia.ID';

	/**
	 * An identiy map to hold any loaded instances of C005tEvidencia objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array C005tEvidencia[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('CoEvidencia', 'FeRegistro', 'CoRegistro', 'CoAcc', 'CoAie', 'TxDescripcionColeccion', 'FeColeccionEvidencia', 'CoColecta', 'CoRecurso', 'TxNombreRecurso', 'TxSerialRecurso', 'TxMarcaRecurso', 'TxModeloRecurso', 'TxNumeroActivo', 'CoTipoEvidencia', 'CoEstadoEvidencia', 'CoLugarSeguro', 'CoRepositorio', 'CoCustodioSti', 'TxObservaciones', 'TxClasificacion', 'Id', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('coEvidencia', 'feRegistro', 'coRegistro', 'coAcc', 'coAie', 'txDescripcionColeccion', 'feColeccionEvidencia', 'coColecta', 'coRecurso', 'txNombreRecurso', 'txSerialRecurso', 'txMarcaRecurso', 'txModeloRecurso', 'txNumeroActivo', 'coTipoEvidencia', 'coEstadoEvidencia', 'coLugarSeguro', 'coRepositorio', 'coCustodioSti', 'txObservaciones', 'txClasificacion', 'id', ),
		BasePeer::TYPE_COLNAME => array (self::CO_EVIDENCIA, self::FE_REGISTRO, self::CO_REGISTRO, self::CO_ACC, self::CO_AIE, self::TX_DESCRIPCION_COLECCION, self::FE_COLECCION_EVIDENCIA, self::CO_COLECTA, self::CO_RECURSO, self::TX_NOMBRE_RECURSO, self::TX_SERIAL_RECURSO, self::TX_MARCA_RECURSO, self::TX_MODELO_RECURSO, self::TX_NUMERO_ACTIVO, self::CO_TIPO_EVIDENCIA, self::CO_ESTADO_EVIDENCIA, self::CO_LUGAR_SEGURO, self::CO_REPOSITORIO, self::CO_CUSTODIO_STI, self::TX_OBSERVACIONES, self::TX_CLASIFICACION, self::ID, ),
		BasePeer::TYPE_FIELDNAME => array ('co_evidencia', 'fe_registro', 'co_registro', 'co_acc', 'co_aie', 'tx_descripcion_coleccion', 'fe_coleccion_evidencia', 'co_colecta', 'co_recurso', 'tx_nombre_recurso', 'tx_serial_recurso', 'tx_marca_recurso', 'tx_modelo_recurso', 'tx_numero_activo', 'co_tipo_evidencia', 'co_estado_evidencia', 'co_lugar_seguro', 'co_repositorio', 'co_custodio_sti', 'tx_observaciones', 'tx_clasificacion', 'id', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('CoEvidencia' => 0, 'FeRegistro' => 1, 'CoRegistro' => 2, 'CoAcc' => 3, 'CoAie' => 4, 'TxDescripcionColeccion' => 5, 'FeColeccionEvidencia' => 6, 'CoColecta' => 7, 'CoRecurso' => 8, 'TxNombreRecurso' => 9, 'TxSerialRecurso' => 10, 'TxMarcaRecurso' => 11, 'TxModeloRecurso' => 12, 'TxNumeroActivo' => 13, 'CoTipoEvidencia' => 14, 'CoEstadoEvidencia' => 15, 'CoLugarSeguro' => 16, 'CoRepositorio' => 17, 'CoCustodioSti' => 18, 'TxObservaciones' => 19, 'TxClasificacion' => 20, 'Id' => 21, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('coEvidencia' => 0, 'feRegistro' => 1, 'coRegistro' => 2, 'coAcc' => 3, 'coAie' => 4, 'txDescripcionColeccion' => 5, 'feColeccionEvidencia' => 6, 'coColecta' => 7, 'coRecurso' => 8, 'txNombreRecurso' => 9, 'txSerialRecurso' => 10, 'txMarcaRecurso' => 11, 'txModeloRecurso' => 12, 'txNumeroActivo' => 13, 'coTipoEvidencia' => 14, 'coEstadoEvidencia' => 15, 'coLugarSeguro' => 16, 'coRepositorio' => 17, 'coCustodioSti' => 18, 'txObservaciones' => 19, 'txClasificacion' => 20, 'id' => 21, ),
		BasePeer::TYPE_COLNAME => array (self::CO_EVIDENCIA => 0, self::FE_REGISTRO => 1, self::CO_REGISTRO => 2, self::CO_ACC => 3, self::CO_AIE => 4, self::TX_DESCRIPCION_COLECCION => 5, self::FE_COLECCION_EVIDENCIA => 6, self::CO_COLECTA => 7, self::CO_RECURSO => 8, self::TX_NOMBRE_RECURSO => 9, self::TX_SERIAL_RECURSO => 10, self::TX_MARCA_RECURSO => 11, self::TX_MODELO_RECURSO => 12, self::TX_NUMERO_ACTIVO => 13, self::CO_TIPO_EVIDENCIA => 14, self::CO_ESTADO_EVIDENCIA => 15, self::CO_LUGAR_SEGURO => 16, self::CO_REPOSITORIO => 17, self::CO_CUSTODIO_STI => 18, self::TX_OBSERVACIONES => 19, self::TX_CLASIFICACION => 20, self::ID => 21, ),
		BasePeer::TYPE_FIELDNAME => array ('co_evidencia' => 0, 'fe_registro' => 1, 'co_registro' => 2, 'co_acc' => 3, 'co_aie' => 4, 'tx_descripcion_coleccion' => 5, 'fe_coleccion_evidencia' => 6, 'co_colecta' => 7, 'co_recurso' => 8, 'tx_nombre_recurso' => 9, 'tx_serial_recurso' => 10, 'tx_marca_recurso' => 11, 'tx_modelo_recurso' => 12, 'tx_numero_activo' => 13, 'co_tipo_evidencia' => 14, 'co_estado_evidencia' => 15, 'co_lugar_seguro' => 16, 'co_repositorio' => 17, 'co_custodio_sti' => 18, 'tx_observaciones' => 19, 'tx_clasificacion' => 20, 'id' => 21, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new C005tEvidenciaMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. C005tEvidenciaPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(C005tEvidenciaPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(C005tEvidenciaPeer::CO_EVIDENCIA);

		$criteria->addSelectColumn(C005tEvidenciaPeer::FE_REGISTRO);

		$criteria->addSelectColumn(C005tEvidenciaPeer::CO_REGISTRO);

		$criteria->addSelectColumn(C005tEvidenciaPeer::CO_ACC);

		$criteria->addSelectColumn(C005tEvidenciaPeer::CO_AIE);

		$criteria->addSelectColumn(C005tEvidenciaPeer::TX_DESCRIPCION_COLECCION);

		$criteria->addSelectColumn(C005tEvidenciaPeer::FE_COLECCION_EVIDENCIA);

		$criteria->addSelectColumn(C005tEvidenciaPeer::CO_COLECTA);

		$criteria->addSelectColumn(C005tEvidenciaPeer::CO_RECURSO);

		$criteria->addSelectColumn(C005tEvidenciaPeer::TX_NOMBRE_RECURSO);

		$criteria->addSelectColumn(C005tEvidenciaPeer::TX_SERIAL_RECURSO);

		$criteria->addSelectColumn(C005tEvidenciaPeer::TX_MARCA_RECURSO);

		$criteria->addSelectColumn(C005tEvidenciaPeer::TX_MODELO_RECURSO);

		$criteria->addSelectColumn(C005tEvidenciaPeer::TX_NUMERO_ACTIVO);

		$criteria->addSelectColumn(C005tEvidenciaPeer::CO_TIPO_EVIDENCIA);

		$criteria->addSelectColumn(C005tEvidenciaPeer::CO_ESTADO_EVIDENCIA);

		$criteria->addSelectColumn(C005tEvidenciaPeer::CO_LUGAR_SEGURO);

		$criteria->addSelectColumn(C005tEvidenciaPeer::CO_REPOSITORIO);

		$criteria->addSelectColumn(C005tEvidenciaPeer::CO_CUSTODIO_STI);

		$criteria->addSelectColumn(C005tEvidenciaPeer::TX_OBSERVACIONES);

		$criteria->addSelectColumn(C005tEvidenciaPeer::TX_CLASIFICACION);

		$criteria->addSelectColumn(C005tEvidenciaPeer::ID);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C005tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C005tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(C005tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseC005tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC005tEvidenciaPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     C005tEvidencia
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = C005tEvidenciaPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return C005tEvidenciaPeer::populateObjects(C005tEvidenciaPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseC005tEvidenciaPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseC005tEvidenciaPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(C005tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			C005tEvidenciaPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      C005tEvidencia $value A C005tEvidencia object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(C005tEvidencia $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A C005tEvidencia object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof C005tEvidencia) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or C005tEvidencia object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     C005tEvidencia Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 21] === null) {
			return null;
		}
		return (string) $row[$startcol + 21];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = C005tEvidenciaPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = C005tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = C005tEvidenciaPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				C005tEvidenciaPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return C005tEvidenciaPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a C005tEvidencia or Criteria object.
	 *
	 * @param      mixed $values Criteria or C005tEvidencia object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseC005tEvidenciaPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseC005tEvidenciaPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(C005tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from C005tEvidencia object
		}

		if ($criteria->containsKey(C005tEvidenciaPeer::ID) && $criteria->keyContainsValue(C005tEvidenciaPeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.C005tEvidenciaPeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseC005tEvidenciaPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseC005tEvidenciaPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a C005tEvidencia or Criteria object.
	 *
	 * @param      mixed $values Criteria or C005tEvidencia object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseC005tEvidenciaPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseC005tEvidenciaPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(C005tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(C005tEvidenciaPeer::ID);
			$selectCriteria->add(C005tEvidenciaPeer::ID, $criteria->remove(C005tEvidenciaPeer::ID), $comparison);

		} else { // $values is C005tEvidencia object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseC005tEvidenciaPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseC005tEvidenciaPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the c005t_evidencia table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(C005tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(C005tEvidenciaPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a C005tEvidencia or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or C005tEvidencia object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(C005tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			C005tEvidenciaPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof C005tEvidencia) {
			// invalidate the cache for this single object
			C005tEvidenciaPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(C005tEvidenciaPeer::ID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				C005tEvidenciaPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given C005tEvidencia object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      C005tEvidencia $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(C005tEvidencia $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(C005tEvidenciaPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(C005tEvidenciaPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(C005tEvidenciaPeer::DATABASE_NAME, C005tEvidenciaPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = C005tEvidenciaPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     C005tEvidencia
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = C005tEvidenciaPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(C005tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(C005tEvidenciaPeer::DATABASE_NAME);
		$criteria->add(C005tEvidenciaPeer::ID, $pk);

		$v = C005tEvidenciaPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(C005tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(C005tEvidenciaPeer::DATABASE_NAME);
			$criteria->add(C005tEvidenciaPeer::ID, $pks, Criteria::IN);
			$objs = C005tEvidenciaPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseC005tEvidenciaPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the C005tEvidenciaPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the C005tEvidenciaPeer class:
//
// Propel::getDatabaseMap(C005tEvidenciaPeer::DATABASE_NAME)->addTableBuilder(C005tEvidenciaPeer::TABLE_NAME, C005tEvidenciaPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseC005tEvidenciaPeer::DATABASE_NAME)->addTableBuilder(BaseC005tEvidenciaPeer::TABLE_NAME, BaseC005tEvidenciaPeer::getMapBuilder());

