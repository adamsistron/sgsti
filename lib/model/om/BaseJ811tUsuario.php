<?php

/**
 * Base class that represents a row from the 'j811t_usuario' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Sat Nov 14 07:33:32 2015
 *
 * @package    lib.model.om
 */
abstract class BaseJ811tUsuario extends BaseObject  implements Persistent {


  const PEER = 'J811tUsuarioPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        J811tUsuarioPeer
	 */
	protected static $peer;

	/**
	 * The value for the co_usuario field.
	 * @var        string
	 */
	protected $co_usuario;

	/**
	 * The value for the tx_indicador field.
	 * @var        string
	 */
	protected $tx_indicador;

	/**
	 * The value for the co_persona field.
	 * @var        string
	 */
	protected $co_persona;

	/**
	 * The value for the co_rol field.
	 * @var        string
	 */
	protected $co_rol;

	/**
	 * @var        J812Persona
	 */
	protected $aJ812Persona;

	/**
	 * @var        J809tRol
	 */
	protected $aJ809tRol;

	/**
	 * @var        array C003tActaAcc[] Collection to store aggregation of C003tActaAcc objects.
	 */
	protected $collC003tActaAccs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC003tActaAccs.
	 */
	private $lastC003tActaAccCriteria = null;

	/**
	 * @var        array C004tActaAie[] Collection to store aggregation of C004tActaAie objects.
	 */
	protected $collC004tActaAies;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC004tActaAies.
	 */
	private $lastC004tActaAieCriteria = null;

	/**
	 * @var        array C005tActaAnie[] Collection to store aggregation of C005tActaAnie objects.
	 */
	protected $collC005tActaAnies;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC005tActaAnies.
	 */
	private $lastC005tActaAnieCriteria = null;

	/**
	 * @var        array C006tEvidencia[] Collection to store aggregation of C006tEvidencia objects.
	 */
	protected $collC006tEvidenciasRelatedByCoRegistra;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC006tEvidenciasRelatedByCoRegistra.
	 */
	private $lastC006tEvidenciaRelatedByCoRegistraCriteria = null;

	/**
	 * @var        array C006tEvidencia[] Collection to store aggregation of C006tEvidencia objects.
	 */
	protected $collC006tEvidenciasRelatedByCoColecta;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC006tEvidenciasRelatedByCoColecta.
	 */
	private $lastC006tEvidenciaRelatedByCoColectaCriteria = null;

	/**
	 * @var        array C006tEvidencia[] Collection to store aggregation of C006tEvidencia objects.
	 */
	protected $collC006tEvidenciasRelatedByCoEntregadoFueraSti;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC006tEvidenciasRelatedByCoEntregadoFueraSti.
	 */
	private $lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseJ811tUsuario object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [co_usuario] column value.
	 * 
	 * @return     string
	 */
	public function getCoUsuario()
	{
		return $this->co_usuario;
	}

	/**
	 * Get the [tx_indicador] column value.
	 * 
	 * @return     string
	 */
	public function getTxIndicador()
	{
		return $this->tx_indicador;
	}

	/**
	 * Get the [co_persona] column value.
	 * 
	 * @return     string
	 */
	public function getCoPersona()
	{
		return $this->co_persona;
	}

	/**
	 * Get the [co_rol] column value.
	 * 
	 * @return     string
	 */
	public function getCoRol()
	{
		return $this->co_rol;
	}

	/**
	 * Set the value of [co_usuario] column.
	 * 
	 * @param      string $v new value
	 * @return     J811tUsuario The current object (for fluent API support)
	 */
	public function setCoUsuario($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_usuario !== $v) {
			$this->co_usuario = $v;
			$this->modifiedColumns[] = J811tUsuarioPeer::CO_USUARIO;
		}

		return $this;
	} // setCoUsuario()

	/**
	 * Set the value of [tx_indicador] column.
	 * 
	 * @param      string $v new value
	 * @return     J811tUsuario The current object (for fluent API support)
	 */
	public function setTxIndicador($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_indicador !== $v) {
			$this->tx_indicador = $v;
			$this->modifiedColumns[] = J811tUsuarioPeer::TX_INDICADOR;
		}

		return $this;
	} // setTxIndicador()

	/**
	 * Set the value of [co_persona] column.
	 * 
	 * @param      string $v new value
	 * @return     J811tUsuario The current object (for fluent API support)
	 */
	public function setCoPersona($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_persona !== $v) {
			$this->co_persona = $v;
			$this->modifiedColumns[] = J811tUsuarioPeer::CO_PERSONA;
		}

		if ($this->aJ812Persona !== null && $this->aJ812Persona->getCoPersona() !== $v) {
			$this->aJ812Persona = null;
		}

		return $this;
	} // setCoPersona()

	/**
	 * Set the value of [co_rol] column.
	 * 
	 * @param      string $v new value
	 * @return     J811tUsuario The current object (for fluent API support)
	 */
	public function setCoRol($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_rol !== $v) {
			$this->co_rol = $v;
			$this->modifiedColumns[] = J811tUsuarioPeer::CO_ROL;
		}

		if ($this->aJ809tRol !== null && $this->aJ809tRol->getCoRol() !== $v) {
			$this->aJ809tRol = null;
		}

		return $this;
	} // setCoRol()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->co_usuario = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->tx_indicador = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->co_persona = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->co_rol = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 4; // 4 = J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating J811tUsuario object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aJ812Persona !== null && $this->co_persona !== $this->aJ812Persona->getCoPersona()) {
			$this->aJ812Persona = null;
		}
		if ($this->aJ809tRol !== null && $this->co_rol !== $this->aJ809tRol->getCoRol()) {
			$this->aJ809tRol = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J811tUsuarioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = J811tUsuarioPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aJ812Persona = null;
			$this->aJ809tRol = null;
			$this->collC003tActaAccs = null;
			$this->lastC003tActaAccCriteria = null;

			$this->collC004tActaAies = null;
			$this->lastC004tActaAieCriteria = null;

			$this->collC005tActaAnies = null;
			$this->lastC005tActaAnieCriteria = null;

			$this->collC006tEvidenciasRelatedByCoRegistra = null;
			$this->lastC006tEvidenciaRelatedByCoRegistraCriteria = null;

			$this->collC006tEvidenciasRelatedByCoColecta = null;
			$this->lastC006tEvidenciaRelatedByCoColectaCriteria = null;

			$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = null;
			$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseJ811tUsuario:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J811tUsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			J811tUsuarioPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseJ811tUsuario:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseJ811tUsuario:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J811tUsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseJ811tUsuario:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			J811tUsuarioPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aJ812Persona !== null) {
				if ($this->aJ812Persona->isModified() || $this->aJ812Persona->isNew()) {
					$affectedRows += $this->aJ812Persona->save($con);
				}
				$this->setJ812Persona($this->aJ812Persona);
			}

			if ($this->aJ809tRol !== null) {
				if ($this->aJ809tRol->isModified() || $this->aJ809tRol->isNew()) {
					$affectedRows += $this->aJ809tRol->save($con);
				}
				$this->setJ809tRol($this->aJ809tRol);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = J811tUsuarioPeer::CO_USUARIO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = J811tUsuarioPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setCoUsuario($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += J811tUsuarioPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collC003tActaAccs !== null) {
				foreach ($this->collC003tActaAccs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC004tActaAies !== null) {
				foreach ($this->collC004tActaAies as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC005tActaAnies !== null) {
				foreach ($this->collC005tActaAnies as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC006tEvidenciasRelatedByCoRegistra !== null) {
				foreach ($this->collC006tEvidenciasRelatedByCoRegistra as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC006tEvidenciasRelatedByCoColecta !== null) {
				foreach ($this->collC006tEvidenciasRelatedByCoColecta as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti !== null) {
				foreach ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aJ812Persona !== null) {
				if (!$this->aJ812Persona->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ812Persona->getValidationFailures());
				}
			}

			if ($this->aJ809tRol !== null) {
				if (!$this->aJ809tRol->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ809tRol->getValidationFailures());
				}
			}


			if (($retval = J811tUsuarioPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collC003tActaAccs !== null) {
					foreach ($this->collC003tActaAccs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC004tActaAies !== null) {
					foreach ($this->collC004tActaAies as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC005tActaAnies !== null) {
					foreach ($this->collC005tActaAnies as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC006tEvidenciasRelatedByCoRegistra !== null) {
					foreach ($this->collC006tEvidenciasRelatedByCoRegistra as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC006tEvidenciasRelatedByCoColecta !== null) {
					foreach ($this->collC006tEvidenciasRelatedByCoColecta as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti !== null) {
					foreach ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = J811tUsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCoUsuario();
				break;
			case 1:
				return $this->getTxIndicador();
				break;
			case 2:
				return $this->getCoPersona();
				break;
			case 3:
				return $this->getCoRol();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = J811tUsuarioPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCoUsuario(),
			$keys[1] => $this->getTxIndicador(),
			$keys[2] => $this->getCoPersona(),
			$keys[3] => $this->getCoRol(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = J811tUsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCoUsuario($value);
				break;
			case 1:
				$this->setTxIndicador($value);
				break;
			case 2:
				$this->setCoPersona($value);
				break;
			case 3:
				$this->setCoRol($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = J811tUsuarioPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCoUsuario($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTxIndicador($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCoPersona($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCoRol($arr[$keys[3]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);

		if ($this->isColumnModified(J811tUsuarioPeer::CO_USUARIO)) $criteria->add(J811tUsuarioPeer::CO_USUARIO, $this->co_usuario);
		if ($this->isColumnModified(J811tUsuarioPeer::TX_INDICADOR)) $criteria->add(J811tUsuarioPeer::TX_INDICADOR, $this->tx_indicador);
		if ($this->isColumnModified(J811tUsuarioPeer::CO_PERSONA)) $criteria->add(J811tUsuarioPeer::CO_PERSONA, $this->co_persona);
		if ($this->isColumnModified(J811tUsuarioPeer::CO_ROL)) $criteria->add(J811tUsuarioPeer::CO_ROL, $this->co_rol);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);

		$criteria->add(J811tUsuarioPeer::CO_USUARIO, $this->co_usuario);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getCoUsuario();
	}

	/**
	 * Generic method to set the primary key (co_usuario column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCoUsuario($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of J811tUsuario (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTxIndicador($this->tx_indicador);

		$copyObj->setCoPersona($this->co_persona);

		$copyObj->setCoRol($this->co_rol);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getC003tActaAccs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC003tActaAcc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC004tActaAies() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC004tActaAie($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC005tActaAnies() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC005tActaAnie($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC006tEvidenciasRelatedByCoRegistra() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC006tEvidenciaRelatedByCoRegistra($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC006tEvidenciasRelatedByCoColecta() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC006tEvidenciaRelatedByCoColecta($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC006tEvidenciasRelatedByCoEntregadoFueraSti() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC006tEvidenciaRelatedByCoEntregadoFueraSti($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setCoUsuario(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     J811tUsuario Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     J811tUsuarioPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new J811tUsuarioPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a J812Persona object.
	 *
	 * @param      J812Persona $v
	 * @return     J811tUsuario The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ812Persona(J812Persona $v = null)
	{
		if ($v === null) {
			$this->setCoPersona(NULL);
		} else {
			$this->setCoPersona($v->getCoPersona());
		}

		$this->aJ812Persona = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J812Persona object, it will not be re-added.
		if ($v !== null) {
			$v->addJ811tUsuario($this);
		}

		return $this;
	}


	/**
	 * Get the associated J812Persona object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J812Persona The associated J812Persona object.
	 * @throws     PropelException
	 */
	public function getJ812Persona(PropelPDO $con = null)
	{
		if ($this->aJ812Persona === null && (($this->co_persona !== "" && $this->co_persona !== null))) {
			$c = new Criteria(J812PersonaPeer::DATABASE_NAME);
			$c->add(J812PersonaPeer::CO_PERSONA, $this->co_persona);
			$this->aJ812Persona = J812PersonaPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ812Persona->addJ811tUsuarios($this);
			 */
		}
		return $this->aJ812Persona;
	}

	/**
	 * Declares an association between this object and a J809tRol object.
	 *
	 * @param      J809tRol $v
	 * @return     J811tUsuario The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ809tRol(J809tRol $v = null)
	{
		if ($v === null) {
			$this->setCoRol(NULL);
		} else {
			$this->setCoRol($v->getCoRol());
		}

		$this->aJ809tRol = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J809tRol object, it will not be re-added.
		if ($v !== null) {
			$v->addJ811tUsuario($this);
		}

		return $this;
	}


	/**
	 * Get the associated J809tRol object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J809tRol The associated J809tRol object.
	 * @throws     PropelException
	 */
	public function getJ809tRol(PropelPDO $con = null)
	{
		if ($this->aJ809tRol === null && (($this->co_rol !== "" && $this->co_rol !== null))) {
			$c = new Criteria(J809tRolPeer::DATABASE_NAME);
			$c->add(J809tRolPeer::CO_ROL, $this->co_rol);
			$this->aJ809tRol = J809tRolPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ809tRol->addJ811tUsuarios($this);
			 */
		}
		return $this->aJ809tRol;
	}

	/**
	 * Clears out the collC003tActaAccs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC003tActaAccs()
	 */
	public function clearC003tActaAccs()
	{
		$this->collC003tActaAccs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC003tActaAccs collection (array).
	 *
	 * By default this just sets the collC003tActaAccs collection to an empty array (like clearcollC003tActaAccs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC003tActaAccs()
	{
		$this->collC003tActaAccs = array();
	}

	/**
	 * Gets an array of C003tActaAcc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J811tUsuario has previously been saved, it will retrieve
	 * related C003tActaAccs from storage. If this J811tUsuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C003tActaAcc[]
	 * @throws     PropelException
	 */
	public function getC003tActaAccs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
			   $this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				C003tActaAccPeer::addSelectColumns($criteria);
				$this->collC003tActaAccs = C003tActaAccPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				C003tActaAccPeer::addSelectColumns($criteria);
				if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
					$this->collC003tActaAccs = C003tActaAccPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;
		return $this->collC003tActaAccs;
	}

	/**
	 * Returns the number of related C003tActaAcc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C003tActaAcc objects.
	 * @throws     PropelException
	 */
	public function countC003tActaAccs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				$count = C003tActaAccPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
					$count = C003tActaAccPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC003tActaAccs);
				}
			} else {
				$count = count($this->collC003tActaAccs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C003tActaAcc object to this object
	 * through the C003tActaAcc foreign key attribute.
	 *
	 * @param      C003tActaAcc $l C003tActaAcc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC003tActaAcc(C003tActaAcc $l)
	{
		if ($this->collC003tActaAccs === null) {
			$this->initC003tActaAccs();
		}
		if (!in_array($l, $this->collC003tActaAccs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC003tActaAccs, $l);
			$l->setJ811tUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC003tActaAccsJoinC001tForense($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC003tActaAccsJoinJ813tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC003tActaAccsJoinJ814tNegocio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC003tActaAccsJoinJ815tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC003tActaAccsJoinJ005tEstadoActa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ005tEstadoActa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ005tEstadoActa($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC003tActaAccsJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC003tActaAccsJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC003tActaAccsJoinJ812Persona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ812Persona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ812Persona($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC003tActaAccsJoinJ805tTipoRecurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ805tTipoRecurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ805tTipoRecurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC003tActaAccsJoinJ806tCiudad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ806tCiudad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_DESTRUYE, $this->co_usuario);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ806tCiudad($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}

	/**
	 * Clears out the collC004tActaAies collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC004tActaAies()
	 */
	public function clearC004tActaAies()
	{
		$this->collC004tActaAies = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC004tActaAies collection (array).
	 *
	 * By default this just sets the collC004tActaAies collection to an empty array (like clearcollC004tActaAies());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC004tActaAies()
	{
		$this->collC004tActaAies = array();
	}

	/**
	 * Gets an array of C004tActaAie objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J811tUsuario has previously been saved, it will retrieve
	 * related C004tActaAies from storage. If this J811tUsuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C004tActaAie[]
	 * @throws     PropelException
	 */
	public function getC004tActaAies($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
			   $this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				C004tActaAiePeer::addSelectColumns($criteria);
				$this->collC004tActaAies = C004tActaAiePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				C004tActaAiePeer::addSelectColumns($criteria);
				if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
					$this->collC004tActaAies = C004tActaAiePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;
		return $this->collC004tActaAies;
	}

	/**
	 * Returns the number of related C004tActaAie objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C004tActaAie objects.
	 * @throws     PropelException
	 */
	public function countC004tActaAies(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				$count = C004tActaAiePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
					$count = C004tActaAiePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC004tActaAies);
				}
			} else {
				$count = count($this->collC004tActaAies);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C004tActaAie object to this object
	 * through the C004tActaAie foreign key attribute.
	 *
	 * @param      C004tActaAie $l C004tActaAie
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC004tActaAie(C004tActaAie $l)
	{
		if ($this->collC004tActaAies === null) {
			$this->initC004tActaAies();
		}
		if (!in_array($l, $this->collC004tActaAies, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC004tActaAies, $l);
			$l->setJ811tUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC004tActaAiesJoinC001tForense($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC004tActaAiesJoinJ813tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC004tActaAiesJoinJ814tNegocio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC004tActaAiesJoinJ815tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC004tActaAiesJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC004tActaAiesJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC004tActaAiesJoinJ812Persona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ812Persona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ812Persona($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC004tActaAiesJoinJ805tTipoRecurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ805tTipoRecurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ805tTipoRecurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC004tActaAiesJoinJ806tCiudad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ806tCiudad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ806tCiudad($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}

	/**
	 * Clears out the collC005tActaAnies collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC005tActaAnies()
	 */
	public function clearC005tActaAnies()
	{
		$this->collC005tActaAnies = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC005tActaAnies collection (array).
	 *
	 * By default this just sets the collC005tActaAnies collection to an empty array (like clearcollC005tActaAnies());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC005tActaAnies()
	{
		$this->collC005tActaAnies = array();
	}

	/**
	 * Gets an array of C005tActaAnie objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J811tUsuario has previously been saved, it will retrieve
	 * related C005tActaAnies from storage. If this J811tUsuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C005tActaAnie[]
	 * @throws     PropelException
	 */
	public function getC005tActaAnies($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
			   $this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

				C005tActaAniePeer::addSelectColumns($criteria);
				$this->collC005tActaAnies = C005tActaAniePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

				C005tActaAniePeer::addSelectColumns($criteria);
				if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
					$this->collC005tActaAnies = C005tActaAniePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;
		return $this->collC005tActaAnies;
	}

	/**
	 * Returns the number of related C005tActaAnie objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C005tActaAnie objects.
	 * @throws     PropelException
	 */
	public function countC005tActaAnies(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

				$count = C005tActaAniePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

				if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
					$count = C005tActaAniePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC005tActaAnies);
				}
			} else {
				$count = count($this->collC005tActaAnies);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C005tActaAnie object to this object
	 * through the C005tActaAnie foreign key attribute.
	 *
	 * @param      C005tActaAnie $l C005tActaAnie
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC005tActaAnie(C005tActaAnie $l)
	{
		if ($this->collC005tActaAnies === null) {
			$this->initC005tActaAnies();
		}
		if (!in_array($l, $this->collC005tActaAnies, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC005tActaAnies, $l);
			$l->setJ811tUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC005tActaAniesJoinC001tForense($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC005tActaAniesJoinJ813tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC005tActaAniesJoinJ814tNegocio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC005tActaAniesJoinJ815tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC005tActaAniesJoinJ812Persona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ812Persona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ812Persona($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC005tActaAniesJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC005tActaAniesJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_ELABORA, $this->co_usuario);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}

	/**
	 * Clears out the collC006tEvidenciasRelatedByCoRegistra collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC006tEvidenciasRelatedByCoRegistra()
	 */
	public function clearC006tEvidenciasRelatedByCoRegistra()
	{
		$this->collC006tEvidenciasRelatedByCoRegistra = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC006tEvidenciasRelatedByCoRegistra collection (array).
	 *
	 * By default this just sets the collC006tEvidenciasRelatedByCoRegistra collection to an empty array (like clearcollC006tEvidenciasRelatedByCoRegistra());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC006tEvidenciasRelatedByCoRegistra()
	{
		$this->collC006tEvidenciasRelatedByCoRegistra = array();
	}

	/**
	 * Gets an array of C006tEvidencia objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J811tUsuario has previously been saved, it will retrieve
	 * related C006tEvidenciasRelatedByCoRegistra from storage. If this J811tUsuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C006tEvidencia[]
	 * @throws     PropelException
	 */
	public function getC006tEvidenciasRelatedByCoRegistra($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			if ($this->isNew()) {
			   $this->collC006tEvidenciasRelatedByCoRegistra = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				if (!isset($this->lastC006tEvidenciaRelatedByCoRegistraCriteria) || !$this->lastC006tEvidenciaRelatedByCoRegistraCriteria->equals($criteria)) {
					$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC006tEvidenciaRelatedByCoRegistraCriteria = $criteria;
		return $this->collC006tEvidenciasRelatedByCoRegistra;
	}

	/**
	 * Returns the number of related C006tEvidencia objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C006tEvidencia objects.
	 * @throws     PropelException
	 */
	public function countC006tEvidenciasRelatedByCoRegistra(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				$count = C006tEvidenciaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				if (!isset($this->lastC006tEvidenciaRelatedByCoRegistraCriteria) || !$this->lastC006tEvidenciaRelatedByCoRegistraCriteria->equals($criteria)) {
					$count = C006tEvidenciaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC006tEvidenciasRelatedByCoRegistra);
				}
			} else {
				$count = count($this->collC006tEvidenciasRelatedByCoRegistra);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C006tEvidencia object to this object
	 * through the C006tEvidencia foreign key attribute.
	 *
	 * @param      C006tEvidencia $l C006tEvidencia
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC006tEvidenciaRelatedByCoRegistra(C006tEvidencia $l)
	{
		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			$this->initC006tEvidenciasRelatedByCoRegistra();
		}
		if (!in_array($l, $this->collC006tEvidenciasRelatedByCoRegistra, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC006tEvidenciasRelatedByCoRegistra, $l);
			$l->setJ811tUsuarioRelatedByCoRegistra($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoRegistra from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoRegistraJoinC003tActaAcc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoRegistra = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoRegistraCriteria) || !$this->lastC006tEvidenciaRelatedByCoRegistraCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoRegistraCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoRegistra;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoRegistra from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoRegistraJoinC004tActaAie($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoRegistra = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoRegistraCriteria) || !$this->lastC006tEvidenciaRelatedByCoRegistraCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoRegistraCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoRegistra;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoRegistra from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoRegistraJoinJ002tTipoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoRegistra = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoRegistraCriteria) || !$this->lastC006tEvidenciaRelatedByCoRegistraCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoRegistraCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoRegistra;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoRegistra from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoRegistraJoinJ003tEstadoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoRegistra = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoRegistraCriteria) || !$this->lastC006tEvidenciaRelatedByCoRegistraCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoRegistraCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoRegistra;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoRegistra from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoRegistraJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoRegistra = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoRegistraCriteria) || !$this->lastC006tEvidenciaRelatedByCoRegistraCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoRegistraCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoRegistra;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoRegistra from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoRegistraJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoRegistra = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoRegistraCriteria) || !$this->lastC006tEvidenciaRelatedByCoRegistraCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoRegistraCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoRegistra;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoRegistra from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoRegistraJoinJ812PersonaRelatedByCoCustodio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoRegistra = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCustodio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoRegistraCriteria) || !$this->lastC006tEvidenciaRelatedByCoRegistraCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCustodio($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoRegistraCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoRegistra;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoRegistra from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoRegistraJoinJ812PersonaRelatedByCoCreatedAt($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoRegistra = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCreatedAt($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoRegistraCriteria) || !$this->lastC006tEvidenciaRelatedByCoRegistraCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCreatedAt($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoRegistraCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoRegistra;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoRegistra from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoRegistraJoinJ812PersonaRelatedByCoUpdatedAt($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoRegistra === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoRegistra = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoUpdatedAt($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_REGISTRA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoRegistraCriteria) || !$this->lastC006tEvidenciaRelatedByCoRegistraCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoRegistra = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoUpdatedAt($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoRegistraCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoRegistra;
	}

	/**
	 * Clears out the collC006tEvidenciasRelatedByCoColecta collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC006tEvidenciasRelatedByCoColecta()
	 */
	public function clearC006tEvidenciasRelatedByCoColecta()
	{
		$this->collC006tEvidenciasRelatedByCoColecta = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC006tEvidenciasRelatedByCoColecta collection (array).
	 *
	 * By default this just sets the collC006tEvidenciasRelatedByCoColecta collection to an empty array (like clearcollC006tEvidenciasRelatedByCoColecta());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC006tEvidenciasRelatedByCoColecta()
	{
		$this->collC006tEvidenciasRelatedByCoColecta = array();
	}

	/**
	 * Gets an array of C006tEvidencia objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J811tUsuario has previously been saved, it will retrieve
	 * related C006tEvidenciasRelatedByCoColecta from storage. If this J811tUsuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C006tEvidencia[]
	 * @throws     PropelException
	 */
	public function getC006tEvidenciasRelatedByCoColecta($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			if ($this->isNew()) {
			   $this->collC006tEvidenciasRelatedByCoColecta = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				if (!isset($this->lastC006tEvidenciaRelatedByCoColectaCriteria) || !$this->lastC006tEvidenciaRelatedByCoColectaCriteria->equals($criteria)) {
					$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC006tEvidenciaRelatedByCoColectaCriteria = $criteria;
		return $this->collC006tEvidenciasRelatedByCoColecta;
	}

	/**
	 * Returns the number of related C006tEvidencia objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C006tEvidencia objects.
	 * @throws     PropelException
	 */
	public function countC006tEvidenciasRelatedByCoColecta(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				$count = C006tEvidenciaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				if (!isset($this->lastC006tEvidenciaRelatedByCoColectaCriteria) || !$this->lastC006tEvidenciaRelatedByCoColectaCriteria->equals($criteria)) {
					$count = C006tEvidenciaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC006tEvidenciasRelatedByCoColecta);
				}
			} else {
				$count = count($this->collC006tEvidenciasRelatedByCoColecta);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C006tEvidencia object to this object
	 * through the C006tEvidencia foreign key attribute.
	 *
	 * @param      C006tEvidencia $l C006tEvidencia
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC006tEvidenciaRelatedByCoColecta(C006tEvidencia $l)
	{
		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			$this->initC006tEvidenciasRelatedByCoColecta();
		}
		if (!in_array($l, $this->collC006tEvidenciasRelatedByCoColecta, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC006tEvidenciasRelatedByCoColecta, $l);
			$l->setJ811tUsuarioRelatedByCoColecta($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoColecta from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoColectaJoinC003tActaAcc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoColecta = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoColectaCriteria) || !$this->lastC006tEvidenciaRelatedByCoColectaCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoColectaCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoColecta;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoColecta from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoColectaJoinC004tActaAie($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoColecta = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoColectaCriteria) || !$this->lastC006tEvidenciaRelatedByCoColectaCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoColectaCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoColecta;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoColecta from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoColectaJoinJ002tTipoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoColecta = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoColectaCriteria) || !$this->lastC006tEvidenciaRelatedByCoColectaCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoColectaCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoColecta;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoColecta from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoColectaJoinJ003tEstadoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoColecta = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoColectaCriteria) || !$this->lastC006tEvidenciaRelatedByCoColectaCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoColectaCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoColecta;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoColecta from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoColectaJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoColecta = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoColectaCriteria) || !$this->lastC006tEvidenciaRelatedByCoColectaCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoColectaCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoColecta;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoColecta from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoColectaJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoColecta = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoColectaCriteria) || !$this->lastC006tEvidenciaRelatedByCoColectaCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoColectaCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoColecta;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoColecta from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoColectaJoinJ812PersonaRelatedByCoCustodio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoColecta = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCustodio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoColectaCriteria) || !$this->lastC006tEvidenciaRelatedByCoColectaCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCustodio($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoColectaCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoColecta;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoColecta from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoColectaJoinJ812PersonaRelatedByCoCreatedAt($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoColecta = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCreatedAt($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoColectaCriteria) || !$this->lastC006tEvidenciaRelatedByCoColectaCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCreatedAt($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoColectaCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoColecta;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoColecta from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoColectaJoinJ812PersonaRelatedByCoUpdatedAt($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoColecta === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoColecta = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoUpdatedAt($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_COLECTA, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoColectaCriteria) || !$this->lastC006tEvidenciaRelatedByCoColectaCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoColecta = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoUpdatedAt($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoColectaCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoColecta;
	}

	/**
	 * Clears out the collC006tEvidenciasRelatedByCoEntregadoFueraSti collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC006tEvidenciasRelatedByCoEntregadoFueraSti()
	 */
	public function clearC006tEvidenciasRelatedByCoEntregadoFueraSti()
	{
		$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC006tEvidenciasRelatedByCoEntregadoFueraSti collection (array).
	 *
	 * By default this just sets the collC006tEvidenciasRelatedByCoEntregadoFueraSti collection to an empty array (like clearcollC006tEvidenciasRelatedByCoEntregadoFueraSti());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC006tEvidenciasRelatedByCoEntregadoFueraSti()
	{
		$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = array();
	}

	/**
	 * Gets an array of C006tEvidencia objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J811tUsuario has previously been saved, it will retrieve
	 * related C006tEvidenciasRelatedByCoEntregadoFueraSti from storage. If this J811tUsuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C006tEvidencia[]
	 * @throws     PropelException
	 */
	public function getC006tEvidenciasRelatedByCoEntregadoFueraSti($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			if ($this->isNew()) {
			   $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				if (!isset($this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria) || !$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria->equals($criteria)) {
					$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = $criteria;
		return $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti;
	}

	/**
	 * Returns the number of related C006tEvidencia objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C006tEvidencia objects.
	 * @throws     PropelException
	 */
	public function countC006tEvidenciasRelatedByCoEntregadoFueraSti(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				$count = C006tEvidenciaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				if (!isset($this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria) || !$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria->equals($criteria)) {
					$count = C006tEvidenciaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti);
				}
			} else {
				$count = count($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C006tEvidencia object to this object
	 * through the C006tEvidencia foreign key attribute.
	 *
	 * @param      C006tEvidencia $l C006tEvidencia
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC006tEvidenciaRelatedByCoEntregadoFueraSti(C006tEvidencia $l)
	{
		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			$this->initC006tEvidenciasRelatedByCoEntregadoFueraSti();
		}
		if (!in_array($l, $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti, $l);
			$l->setJ811tUsuarioRelatedByCoEntregadoFueraSti($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoEntregadoFueraSti from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoEntregadoFueraStiJoinC003tActaAcc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria) || !$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoEntregadoFueraSti from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoEntregadoFueraStiJoinC004tActaAie($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria) || !$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoEntregadoFueraSti from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoEntregadoFueraStiJoinJ002tTipoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria) || !$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoEntregadoFueraSti from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoEntregadoFueraStiJoinJ003tEstadoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria) || !$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoEntregadoFueraSti from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoEntregadoFueraStiJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria) || !$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoEntregadoFueraSti from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoEntregadoFueraStiJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria) || !$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoEntregadoFueraSti from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoEntregadoFueraStiJoinJ812PersonaRelatedByCoCustodio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCustodio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria) || !$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCustodio($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoEntregadoFueraSti from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoEntregadoFueraStiJoinJ812PersonaRelatedByCoCreatedAt($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCreatedAt($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria) || !$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoCreatedAt($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J811tUsuario is new, it will return
	 * an empty collection; or if this J811tUsuario has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoEntregadoFueraSti from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J811tUsuario.
	 */
	public function getC006tEvidenciasRelatedByCoEntregadoFueraStiJoinJ812PersonaRelatedByCoUpdatedAt($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J811tUsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoUpdatedAt($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI, $this->co_usuario);

			if (!isset($this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria) || !$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = C006tEvidenciaPeer::doSelectJoinJ812PersonaRelatedByCoUpdatedAt($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoEntregadoFueraStiCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collC003tActaAccs) {
				foreach ((array) $this->collC003tActaAccs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC004tActaAies) {
				foreach ((array) $this->collC004tActaAies as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC005tActaAnies) {
				foreach ((array) $this->collC005tActaAnies as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC006tEvidenciasRelatedByCoRegistra) {
				foreach ((array) $this->collC006tEvidenciasRelatedByCoRegistra as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC006tEvidenciasRelatedByCoColecta) {
				foreach ((array) $this->collC006tEvidenciasRelatedByCoColecta as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC006tEvidenciasRelatedByCoEntregadoFueraSti) {
				foreach ((array) $this->collC006tEvidenciasRelatedByCoEntregadoFueraSti as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collC003tActaAccs = null;
		$this->collC004tActaAies = null;
		$this->collC005tActaAnies = null;
		$this->collC006tEvidenciasRelatedByCoRegistra = null;
		$this->collC006tEvidenciasRelatedByCoColecta = null;
		$this->collC006tEvidenciasRelatedByCoEntregadoFueraSti = null;
			$this->aJ812Persona = null;
			$this->aJ809tRol = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseJ811tUsuario:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseJ811tUsuario::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseJ811tUsuario
