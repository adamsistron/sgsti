<?php

/**
 * Base class that represents a row from the 'j812_persona' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Sat Nov 14 07:33:32 2015
 *
 * @package    lib.model.om
 */
abstract class BaseJ812Persona extends BaseObject  implements Persistent {


  const PEER = 'J812PersonaPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        J812PersonaPeer
	 */
	protected static $peer;

	/**
	 * The value for the co_persona field.
	 * @var        string
	 */
	protected $co_persona;

	/**
	 * The value for the nb_persona field.
	 * @var        string
	 */
	protected $nb_persona;

	/**
	 * The value for the ap_persona field.
	 * @var        string
	 */
	protected $ap_persona;

	/**
	 * The value for the co_division field.
	 * @var        string
	 */
	protected $co_division;

	/**
	 * The value for the co_rol field.
	 * @var        string
	 */
	protected $co_rol;

	/**
	 * The value for the co_region field.
	 * @var        string
	 */
	protected $co_region;

	/**
	 * The value for the co_negocio field.
	 * @var        string
	 */
	protected $co_negocio;

	/**
	 * @var        J815tDivision
	 */
	protected $aJ815tDivision;

	/**
	 * @var        J809tRol
	 */
	protected $aJ809tRol;

	/**
	 * @var        J813tRegion
	 */
	protected $aJ813tRegion;

	/**
	 * @var        J814tNegocio
	 */
	protected $aJ814tNegocio;

	/**
	 * @var        array C003tActaAcc[] Collection to store aggregation of C003tActaAcc objects.
	 */
	protected $collC003tActaAccs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC003tActaAccs.
	 */
	private $lastC003tActaAccCriteria = null;

	/**
	 * @var        array C004tActaAie[] Collection to store aggregation of C004tActaAie objects.
	 */
	protected $collC004tActaAies;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC004tActaAies.
	 */
	private $lastC004tActaAieCriteria = null;

	/**
	 * @var        array C005tActaAnie[] Collection to store aggregation of C005tActaAnie objects.
	 */
	protected $collC005tActaAnies;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC005tActaAnies.
	 */
	private $lastC005tActaAnieCriteria = null;

	/**
	 * @var        array C006tEvidencia[] Collection to store aggregation of C006tEvidencia objects.
	 */
	protected $collC006tEvidenciasRelatedByCoCustodio;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC006tEvidenciasRelatedByCoCustodio.
	 */
	private $lastC006tEvidenciaRelatedByCoCustodioCriteria = null;

	/**
	 * @var        array C006tEvidencia[] Collection to store aggregation of C006tEvidencia objects.
	 */
	protected $collC006tEvidenciasRelatedByCoCreatedAt;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC006tEvidenciasRelatedByCoCreatedAt.
	 */
	private $lastC006tEvidenciaRelatedByCoCreatedAtCriteria = null;

	/**
	 * @var        array C006tEvidencia[] Collection to store aggregation of C006tEvidencia objects.
	 */
	protected $collC006tEvidenciasRelatedByCoUpdatedAt;

	/**
	 * @var        Criteria The criteria used to select the current contents of collC006tEvidenciasRelatedByCoUpdatedAt.
	 */
	private $lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = null;

	/**
	 * @var        array J006tLugarSeguro[] Collection to store aggregation of J006tLugarSeguro objects.
	 */
	protected $collJ006tLugarSeguros;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ006tLugarSeguros.
	 */
	private $lastJ006tLugarSeguroCriteria = null;

	/**
	 * @var        array J007tRepositorioDigital[] Collection to store aggregation of J007tRepositorioDigital objects.
	 */
	protected $collJ007tRepositorioDigitals;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ007tRepositorioDigitals.
	 */
	private $lastJ007tRepositorioDigitalCriteria = null;

	/**
	 * @var        array J811tUsuario[] Collection to store aggregation of J811tUsuario objects.
	 */
	protected $collJ811tUsuarios;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJ811tUsuarios.
	 */
	private $lastJ811tUsuarioCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseJ812Persona object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [co_persona] column value.
	 * 
	 * @return     string
	 */
	public function getCoPersona()
	{
		return $this->co_persona;
	}

	/**
	 * Get the [nb_persona] column value.
	 * 
	 * @return     string
	 */
	public function getNbPersona()
	{
		return $this->nb_persona;
	}

	/**
	 * Get the [ap_persona] column value.
	 * 
	 * @return     string
	 */
	public function getApPersona()
	{
		return $this->ap_persona;
	}

	/**
	 * Get the [co_division] column value.
	 * 
	 * @return     string
	 */
	public function getCoDivision()
	{
		return $this->co_division;
	}

	/**
	 * Get the [co_rol] column value.
	 * 
	 * @return     string
	 */
	public function getCoRol()
	{
		return $this->co_rol;
	}

	/**
	 * Get the [co_region] column value.
	 * 
	 * @return     string
	 */
	public function getCoRegion()
	{
		return $this->co_region;
	}

	/**
	 * Get the [co_negocio] column value.
	 * 
	 * @return     string
	 */
	public function getCoNegocio()
	{
		return $this->co_negocio;
	}

	/**
	 * Set the value of [co_persona] column.
	 * 
	 * @param      string $v new value
	 * @return     J812Persona The current object (for fluent API support)
	 */
	public function setCoPersona($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_persona !== $v) {
			$this->co_persona = $v;
			$this->modifiedColumns[] = J812PersonaPeer::CO_PERSONA;
		}

		return $this;
	} // setCoPersona()

	/**
	 * Set the value of [nb_persona] column.
	 * 
	 * @param      string $v new value
	 * @return     J812Persona The current object (for fluent API support)
	 */
	public function setNbPersona($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nb_persona !== $v) {
			$this->nb_persona = $v;
			$this->modifiedColumns[] = J812PersonaPeer::NB_PERSONA;
		}

		return $this;
	} // setNbPersona()

	/**
	 * Set the value of [ap_persona] column.
	 * 
	 * @param      string $v new value
	 * @return     J812Persona The current object (for fluent API support)
	 */
	public function setApPersona($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ap_persona !== $v) {
			$this->ap_persona = $v;
			$this->modifiedColumns[] = J812PersonaPeer::AP_PERSONA;
		}

		return $this;
	} // setApPersona()

	/**
	 * Set the value of [co_division] column.
	 * 
	 * @param      string $v new value
	 * @return     J812Persona The current object (for fluent API support)
	 */
	public function setCoDivision($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_division !== $v) {
			$this->co_division = $v;
			$this->modifiedColumns[] = J812PersonaPeer::CO_DIVISION;
		}

		if ($this->aJ815tDivision !== null && $this->aJ815tDivision->getCoDivision() !== $v) {
			$this->aJ815tDivision = null;
		}

		return $this;
	} // setCoDivision()

	/**
	 * Set the value of [co_rol] column.
	 * 
	 * @param      string $v new value
	 * @return     J812Persona The current object (for fluent API support)
	 */
	public function setCoRol($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_rol !== $v) {
			$this->co_rol = $v;
			$this->modifiedColumns[] = J812PersonaPeer::CO_ROL;
		}

		if ($this->aJ809tRol !== null && $this->aJ809tRol->getCoRol() !== $v) {
			$this->aJ809tRol = null;
		}

		return $this;
	} // setCoRol()

	/**
	 * Set the value of [co_region] column.
	 * 
	 * @param      string $v new value
	 * @return     J812Persona The current object (for fluent API support)
	 */
	public function setCoRegion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_region !== $v) {
			$this->co_region = $v;
			$this->modifiedColumns[] = J812PersonaPeer::CO_REGION;
		}

		if ($this->aJ813tRegion !== null && $this->aJ813tRegion->getCoRegion() !== $v) {
			$this->aJ813tRegion = null;
		}

		return $this;
	} // setCoRegion()

	/**
	 * Set the value of [co_negocio] column.
	 * 
	 * @param      string $v new value
	 * @return     J812Persona The current object (for fluent API support)
	 */
	public function setCoNegocio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_negocio !== $v) {
			$this->co_negocio = $v;
			$this->modifiedColumns[] = J812PersonaPeer::CO_NEGOCIO;
		}

		if ($this->aJ814tNegocio !== null && $this->aJ814tNegocio->getCoNegocio() !== $v) {
			$this->aJ814tNegocio = null;
		}

		return $this;
	} // setCoNegocio()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->co_persona = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->nb_persona = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->ap_persona = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->co_division = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->co_rol = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->co_region = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->co_negocio = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 7; // 7 = J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating J812Persona object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aJ815tDivision !== null && $this->co_division !== $this->aJ815tDivision->getCoDivision()) {
			$this->aJ815tDivision = null;
		}
		if ($this->aJ809tRol !== null && $this->co_rol !== $this->aJ809tRol->getCoRol()) {
			$this->aJ809tRol = null;
		}
		if ($this->aJ813tRegion !== null && $this->co_region !== $this->aJ813tRegion->getCoRegion()) {
			$this->aJ813tRegion = null;
		}
		if ($this->aJ814tNegocio !== null && $this->co_negocio !== $this->aJ814tNegocio->getCoNegocio()) {
			$this->aJ814tNegocio = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J812PersonaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = J812PersonaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aJ815tDivision = null;
			$this->aJ809tRol = null;
			$this->aJ813tRegion = null;
			$this->aJ814tNegocio = null;
			$this->collC003tActaAccs = null;
			$this->lastC003tActaAccCriteria = null;

			$this->collC004tActaAies = null;
			$this->lastC004tActaAieCriteria = null;

			$this->collC005tActaAnies = null;
			$this->lastC005tActaAnieCriteria = null;

			$this->collC006tEvidenciasRelatedByCoCustodio = null;
			$this->lastC006tEvidenciaRelatedByCoCustodioCriteria = null;

			$this->collC006tEvidenciasRelatedByCoCreatedAt = null;
			$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria = null;

			$this->collC006tEvidenciasRelatedByCoUpdatedAt = null;
			$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = null;

			$this->collJ006tLugarSeguros = null;
			$this->lastJ006tLugarSeguroCriteria = null;

			$this->collJ007tRepositorioDigitals = null;
			$this->lastJ007tRepositorioDigitalCriteria = null;

			$this->collJ811tUsuarios = null;
			$this->lastJ811tUsuarioCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseJ812Persona:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J812PersonaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			J812PersonaPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseJ812Persona:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseJ812Persona:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(J812PersonaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseJ812Persona:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			J812PersonaPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aJ815tDivision !== null) {
				if ($this->aJ815tDivision->isModified() || $this->aJ815tDivision->isNew()) {
					$affectedRows += $this->aJ815tDivision->save($con);
				}
				$this->setJ815tDivision($this->aJ815tDivision);
			}

			if ($this->aJ809tRol !== null) {
				if ($this->aJ809tRol->isModified() || $this->aJ809tRol->isNew()) {
					$affectedRows += $this->aJ809tRol->save($con);
				}
				$this->setJ809tRol($this->aJ809tRol);
			}

			if ($this->aJ813tRegion !== null) {
				if ($this->aJ813tRegion->isModified() || $this->aJ813tRegion->isNew()) {
					$affectedRows += $this->aJ813tRegion->save($con);
				}
				$this->setJ813tRegion($this->aJ813tRegion);
			}

			if ($this->aJ814tNegocio !== null) {
				if ($this->aJ814tNegocio->isModified() || $this->aJ814tNegocio->isNew()) {
					$affectedRows += $this->aJ814tNegocio->save($con);
				}
				$this->setJ814tNegocio($this->aJ814tNegocio);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = J812PersonaPeer::CO_PERSONA;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = J812PersonaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setCoPersona($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += J812PersonaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collC003tActaAccs !== null) {
				foreach ($this->collC003tActaAccs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC004tActaAies !== null) {
				foreach ($this->collC004tActaAies as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC005tActaAnies !== null) {
				foreach ($this->collC005tActaAnies as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC006tEvidenciasRelatedByCoCustodio !== null) {
				foreach ($this->collC006tEvidenciasRelatedByCoCustodio as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC006tEvidenciasRelatedByCoCreatedAt !== null) {
				foreach ($this->collC006tEvidenciasRelatedByCoCreatedAt as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collC006tEvidenciasRelatedByCoUpdatedAt !== null) {
				foreach ($this->collC006tEvidenciasRelatedByCoUpdatedAt as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ006tLugarSeguros !== null) {
				foreach ($this->collJ006tLugarSeguros as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ007tRepositorioDigitals !== null) {
				foreach ($this->collJ007tRepositorioDigitals as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJ811tUsuarios !== null) {
				foreach ($this->collJ811tUsuarios as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aJ815tDivision !== null) {
				if (!$this->aJ815tDivision->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ815tDivision->getValidationFailures());
				}
			}

			if ($this->aJ809tRol !== null) {
				if (!$this->aJ809tRol->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ809tRol->getValidationFailures());
				}
			}

			if ($this->aJ813tRegion !== null) {
				if (!$this->aJ813tRegion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ813tRegion->getValidationFailures());
				}
			}

			if ($this->aJ814tNegocio !== null) {
				if (!$this->aJ814tNegocio->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJ814tNegocio->getValidationFailures());
				}
			}


			if (($retval = J812PersonaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collC003tActaAccs !== null) {
					foreach ($this->collC003tActaAccs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC004tActaAies !== null) {
					foreach ($this->collC004tActaAies as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC005tActaAnies !== null) {
					foreach ($this->collC005tActaAnies as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC006tEvidenciasRelatedByCoCustodio !== null) {
					foreach ($this->collC006tEvidenciasRelatedByCoCustodio as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC006tEvidenciasRelatedByCoCreatedAt !== null) {
					foreach ($this->collC006tEvidenciasRelatedByCoCreatedAt as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collC006tEvidenciasRelatedByCoUpdatedAt !== null) {
					foreach ($this->collC006tEvidenciasRelatedByCoUpdatedAt as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ006tLugarSeguros !== null) {
					foreach ($this->collJ006tLugarSeguros as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ007tRepositorioDigitals !== null) {
					foreach ($this->collJ007tRepositorioDigitals as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJ811tUsuarios !== null) {
					foreach ($this->collJ811tUsuarios as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = J812PersonaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCoPersona();
				break;
			case 1:
				return $this->getNbPersona();
				break;
			case 2:
				return $this->getApPersona();
				break;
			case 3:
				return $this->getCoDivision();
				break;
			case 4:
				return $this->getCoRol();
				break;
			case 5:
				return $this->getCoRegion();
				break;
			case 6:
				return $this->getCoNegocio();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = J812PersonaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCoPersona(),
			$keys[1] => $this->getNbPersona(),
			$keys[2] => $this->getApPersona(),
			$keys[3] => $this->getCoDivision(),
			$keys[4] => $this->getCoRol(),
			$keys[5] => $this->getCoRegion(),
			$keys[6] => $this->getCoNegocio(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = J812PersonaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCoPersona($value);
				break;
			case 1:
				$this->setNbPersona($value);
				break;
			case 2:
				$this->setApPersona($value);
				break;
			case 3:
				$this->setCoDivision($value);
				break;
			case 4:
				$this->setCoRol($value);
				break;
			case 5:
				$this->setCoRegion($value);
				break;
			case 6:
				$this->setCoNegocio($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = J812PersonaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCoPersona($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNbPersona($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setApPersona($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCoDivision($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCoRol($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCoRegion($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCoNegocio($arr[$keys[6]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);

		if ($this->isColumnModified(J812PersonaPeer::CO_PERSONA)) $criteria->add(J812PersonaPeer::CO_PERSONA, $this->co_persona);
		if ($this->isColumnModified(J812PersonaPeer::NB_PERSONA)) $criteria->add(J812PersonaPeer::NB_PERSONA, $this->nb_persona);
		if ($this->isColumnModified(J812PersonaPeer::AP_PERSONA)) $criteria->add(J812PersonaPeer::AP_PERSONA, $this->ap_persona);
		if ($this->isColumnModified(J812PersonaPeer::CO_DIVISION)) $criteria->add(J812PersonaPeer::CO_DIVISION, $this->co_division);
		if ($this->isColumnModified(J812PersonaPeer::CO_ROL)) $criteria->add(J812PersonaPeer::CO_ROL, $this->co_rol);
		if ($this->isColumnModified(J812PersonaPeer::CO_REGION)) $criteria->add(J812PersonaPeer::CO_REGION, $this->co_region);
		if ($this->isColumnModified(J812PersonaPeer::CO_NEGOCIO)) $criteria->add(J812PersonaPeer::CO_NEGOCIO, $this->co_negocio);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);

		$criteria->add(J812PersonaPeer::CO_PERSONA, $this->co_persona);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getCoPersona();
	}

	/**
	 * Generic method to set the primary key (co_persona column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCoPersona($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of J812Persona (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setNbPersona($this->nb_persona);

		$copyObj->setApPersona($this->ap_persona);

		$copyObj->setCoDivision($this->co_division);

		$copyObj->setCoRol($this->co_rol);

		$copyObj->setCoRegion($this->co_region);

		$copyObj->setCoNegocio($this->co_negocio);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getC003tActaAccs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC003tActaAcc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC004tActaAies() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC004tActaAie($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC005tActaAnies() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC005tActaAnie($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC006tEvidenciasRelatedByCoCustodio() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC006tEvidenciaRelatedByCoCustodio($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC006tEvidenciasRelatedByCoCreatedAt() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC006tEvidenciaRelatedByCoCreatedAt($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getC006tEvidenciasRelatedByCoUpdatedAt() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addC006tEvidenciaRelatedByCoUpdatedAt($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ006tLugarSeguros() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ006tLugarSeguro($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ007tRepositorioDigitals() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ007tRepositorioDigital($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJ811tUsuarios() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJ811tUsuario($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setCoPersona(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     J812Persona Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     J812PersonaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new J812PersonaPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a J815tDivision object.
	 *
	 * @param      J815tDivision $v
	 * @return     J812Persona The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ815tDivision(J815tDivision $v = null)
	{
		if ($v === null) {
			$this->setCoDivision(NULL);
		} else {
			$this->setCoDivision($v->getCoDivision());
		}

		$this->aJ815tDivision = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J815tDivision object, it will not be re-added.
		if ($v !== null) {
			$v->addJ812Persona($this);
		}

		return $this;
	}


	/**
	 * Get the associated J815tDivision object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J815tDivision The associated J815tDivision object.
	 * @throws     PropelException
	 */
	public function getJ815tDivision(PropelPDO $con = null)
	{
		if ($this->aJ815tDivision === null && (($this->co_division !== "" && $this->co_division !== null))) {
			$c = new Criteria(J815tDivisionPeer::DATABASE_NAME);
			$c->add(J815tDivisionPeer::CO_DIVISION, $this->co_division);
			$this->aJ815tDivision = J815tDivisionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ815tDivision->addJ812Personas($this);
			 */
		}
		return $this->aJ815tDivision;
	}

	/**
	 * Declares an association between this object and a J809tRol object.
	 *
	 * @param      J809tRol $v
	 * @return     J812Persona The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ809tRol(J809tRol $v = null)
	{
		if ($v === null) {
			$this->setCoRol(NULL);
		} else {
			$this->setCoRol($v->getCoRol());
		}

		$this->aJ809tRol = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J809tRol object, it will not be re-added.
		if ($v !== null) {
			$v->addJ812Persona($this);
		}

		return $this;
	}


	/**
	 * Get the associated J809tRol object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J809tRol The associated J809tRol object.
	 * @throws     PropelException
	 */
	public function getJ809tRol(PropelPDO $con = null)
	{
		if ($this->aJ809tRol === null && (($this->co_rol !== "" && $this->co_rol !== null))) {
			$c = new Criteria(J809tRolPeer::DATABASE_NAME);
			$c->add(J809tRolPeer::CO_ROL, $this->co_rol);
			$this->aJ809tRol = J809tRolPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ809tRol->addJ812Personas($this);
			 */
		}
		return $this->aJ809tRol;
	}

	/**
	 * Declares an association between this object and a J813tRegion object.
	 *
	 * @param      J813tRegion $v
	 * @return     J812Persona The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ813tRegion(J813tRegion $v = null)
	{
		if ($v === null) {
			$this->setCoRegion(NULL);
		} else {
			$this->setCoRegion($v->getCoRegion());
		}

		$this->aJ813tRegion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J813tRegion object, it will not be re-added.
		if ($v !== null) {
			$v->addJ812Persona($this);
		}

		return $this;
	}


	/**
	 * Get the associated J813tRegion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J813tRegion The associated J813tRegion object.
	 * @throws     PropelException
	 */
	public function getJ813tRegion(PropelPDO $con = null)
	{
		if ($this->aJ813tRegion === null && (($this->co_region !== "" && $this->co_region !== null))) {
			$c = new Criteria(J813tRegionPeer::DATABASE_NAME);
			$c->add(J813tRegionPeer::CO_REGION, $this->co_region);
			$this->aJ813tRegion = J813tRegionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ813tRegion->addJ812Personas($this);
			 */
		}
		return $this->aJ813tRegion;
	}

	/**
	 * Declares an association between this object and a J814tNegocio object.
	 *
	 * @param      J814tNegocio $v
	 * @return     J812Persona The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJ814tNegocio(J814tNegocio $v = null)
	{
		if ($v === null) {
			$this->setCoNegocio(NULL);
		} else {
			$this->setCoNegocio($v->getCoNegocio());
		}

		$this->aJ814tNegocio = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the J814tNegocio object, it will not be re-added.
		if ($v !== null) {
			$v->addJ812Persona($this);
		}

		return $this;
	}


	/**
	 * Get the associated J814tNegocio object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     J814tNegocio The associated J814tNegocio object.
	 * @throws     PropelException
	 */
	public function getJ814tNegocio(PropelPDO $con = null)
	{
		if ($this->aJ814tNegocio === null && (($this->co_negocio !== "" && $this->co_negocio !== null))) {
			$c = new Criteria(J814tNegocioPeer::DATABASE_NAME);
			$c->add(J814tNegocioPeer::CO_NEGOCIO, $this->co_negocio);
			$this->aJ814tNegocio = J814tNegocioPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJ814tNegocio->addJ812Personas($this);
			 */
		}
		return $this->aJ814tNegocio;
	}

	/**
	 * Clears out the collC003tActaAccs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC003tActaAccs()
	 */
	public function clearC003tActaAccs()
	{
		$this->collC003tActaAccs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC003tActaAccs collection (array).
	 *
	 * By default this just sets the collC003tActaAccs collection to an empty array (like clearcollC003tActaAccs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC003tActaAccs()
	{
		$this->collC003tActaAccs = array();
	}

	/**
	 * Gets an array of C003tActaAcc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J812Persona has previously been saved, it will retrieve
	 * related C003tActaAccs from storage. If this J812Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C003tActaAcc[]
	 * @throws     PropelException
	 */
	public function getC003tActaAccs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
			   $this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				C003tActaAccPeer::addSelectColumns($criteria);
				$this->collC003tActaAccs = C003tActaAccPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				C003tActaAccPeer::addSelectColumns($criteria);
				if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
					$this->collC003tActaAccs = C003tActaAccPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;
		return $this->collC003tActaAccs;
	}

	/**
	 * Returns the number of related C003tActaAcc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C003tActaAcc objects.
	 * @throws     PropelException
	 */
	public function countC003tActaAccs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				$count = C003tActaAccPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
					$count = C003tActaAccPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC003tActaAccs);
				}
			} else {
				$count = count($this->collC003tActaAccs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C003tActaAcc object to this object
	 * through the C003tActaAcc foreign key attribute.
	 *
	 * @param      C003tActaAcc $l C003tActaAcc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC003tActaAcc(C003tActaAcc $l)
	{
		if ($this->collC003tActaAccs === null) {
			$this->initC003tActaAccs();
		}
		if (!in_array($l, $this->collC003tActaAccs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC003tActaAccs, $l);
			$l->setJ812Persona($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC003tActaAccsJoinC001tForense($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC003tActaAccsJoinJ813tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC003tActaAccsJoinJ814tNegocio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC003tActaAccsJoinJ815tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC003tActaAccsJoinJ005tEstadoActa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ005tEstadoActa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ005tEstadoActa($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC003tActaAccsJoinJ811tUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ811tUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ811tUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC003tActaAccsJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC003tActaAccsJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC003tActaAccsJoinJ805tTipoRecurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ805tTipoRecurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ805tTipoRecurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C003tActaAccs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC003tActaAccsJoinJ806tCiudad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC003tActaAccs === null) {
			if ($this->isNew()) {
				$this->collC003tActaAccs = array();
			} else {

				$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ806tCiudad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C003tActaAccPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC003tActaAccCriteria) || !$this->lastC003tActaAccCriteria->equals($criteria)) {
				$this->collC003tActaAccs = C003tActaAccPeer::doSelectJoinJ806tCiudad($criteria, $con, $join_behavior);
			}
		}
		$this->lastC003tActaAccCriteria = $criteria;

		return $this->collC003tActaAccs;
	}

	/**
	 * Clears out the collC004tActaAies collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC004tActaAies()
	 */
	public function clearC004tActaAies()
	{
		$this->collC004tActaAies = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC004tActaAies collection (array).
	 *
	 * By default this just sets the collC004tActaAies collection to an empty array (like clearcollC004tActaAies());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC004tActaAies()
	{
		$this->collC004tActaAies = array();
	}

	/**
	 * Gets an array of C004tActaAie objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J812Persona has previously been saved, it will retrieve
	 * related C004tActaAies from storage. If this J812Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C004tActaAie[]
	 * @throws     PropelException
	 */
	public function getC004tActaAies($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
			   $this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				C004tActaAiePeer::addSelectColumns($criteria);
				$this->collC004tActaAies = C004tActaAiePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				C004tActaAiePeer::addSelectColumns($criteria);
				if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
					$this->collC004tActaAies = C004tActaAiePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;
		return $this->collC004tActaAies;
	}

	/**
	 * Returns the number of related C004tActaAie objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C004tActaAie objects.
	 * @throws     PropelException
	 */
	public function countC004tActaAies(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				$count = C004tActaAiePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
					$count = C004tActaAiePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC004tActaAies);
				}
			} else {
				$count = count($this->collC004tActaAies);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C004tActaAie object to this object
	 * through the C004tActaAie foreign key attribute.
	 *
	 * @param      C004tActaAie $l C004tActaAie
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC004tActaAie(C004tActaAie $l)
	{
		if ($this->collC004tActaAies === null) {
			$this->initC004tActaAies();
		}
		if (!in_array($l, $this->collC004tActaAies, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC004tActaAies, $l);
			$l->setJ812Persona($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC004tActaAiesJoinC001tForense($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC004tActaAiesJoinJ813tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC004tActaAiesJoinJ814tNegocio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC004tActaAiesJoinJ815tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC004tActaAiesJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC004tActaAiesJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC004tActaAiesJoinJ811tUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ811tUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ811tUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC004tActaAiesJoinJ805tTipoRecurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ805tTipoRecurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ805tTipoRecurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C004tActaAies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC004tActaAiesJoinJ806tCiudad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC004tActaAies === null) {
			if ($this->isNew()) {
				$this->collC004tActaAies = array();
			} else {

				$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ806tCiudad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C004tActaAiePeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC004tActaAieCriteria) || !$this->lastC004tActaAieCriteria->equals($criteria)) {
				$this->collC004tActaAies = C004tActaAiePeer::doSelectJoinJ806tCiudad($criteria, $con, $join_behavior);
			}
		}
		$this->lastC004tActaAieCriteria = $criteria;

		return $this->collC004tActaAies;
	}

	/**
	 * Clears out the collC005tActaAnies collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC005tActaAnies()
	 */
	public function clearC005tActaAnies()
	{
		$this->collC005tActaAnies = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC005tActaAnies collection (array).
	 *
	 * By default this just sets the collC005tActaAnies collection to an empty array (like clearcollC005tActaAnies());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC005tActaAnies()
	{
		$this->collC005tActaAnies = array();
	}

	/**
	 * Gets an array of C005tActaAnie objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J812Persona has previously been saved, it will retrieve
	 * related C005tActaAnies from storage. If this J812Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C005tActaAnie[]
	 * @throws     PropelException
	 */
	public function getC005tActaAnies($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
			   $this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

				C005tActaAniePeer::addSelectColumns($criteria);
				$this->collC005tActaAnies = C005tActaAniePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

				C005tActaAniePeer::addSelectColumns($criteria);
				if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
					$this->collC005tActaAnies = C005tActaAniePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;
		return $this->collC005tActaAnies;
	}

	/**
	 * Returns the number of related C005tActaAnie objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C005tActaAnie objects.
	 * @throws     PropelException
	 */
	public function countC005tActaAnies(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

				$count = C005tActaAniePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

				if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
					$count = C005tActaAniePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC005tActaAnies);
				}
			} else {
				$count = count($this->collC005tActaAnies);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C005tActaAnie object to this object
	 * through the C005tActaAnie foreign key attribute.
	 *
	 * @param      C005tActaAnie $l C005tActaAnie
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC005tActaAnie(C005tActaAnie $l)
	{
		if ($this->collC005tActaAnies === null) {
			$this->initC005tActaAnies();
		}
		if (!in_array($l, $this->collC005tActaAnies, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC005tActaAnies, $l);
			$l->setJ812Persona($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC005tActaAniesJoinC001tForense($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinC001tForense($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC005tActaAniesJoinJ813tRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ813tRegion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC005tActaAniesJoinJ814tNegocio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ814tNegocio($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC005tActaAniesJoinJ815tDivision($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ815tDivision($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC005tActaAniesJoinJ811tUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ811tUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ811tUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC005tActaAniesJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C005tActaAnies from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC005tActaAniesJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC005tActaAnies === null) {
			if ($this->isNew()) {
				$this->collC005tActaAnies = array();
			} else {

				$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C005tActaAniePeer::CO_NIEGA, $this->co_persona);

			if (!isset($this->lastC005tActaAnieCriteria) || !$this->lastC005tActaAnieCriteria->equals($criteria)) {
				$this->collC005tActaAnies = C005tActaAniePeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC005tActaAnieCriteria = $criteria;

		return $this->collC005tActaAnies;
	}

	/**
	 * Clears out the collC006tEvidenciasRelatedByCoCustodio collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC006tEvidenciasRelatedByCoCustodio()
	 */
	public function clearC006tEvidenciasRelatedByCoCustodio()
	{
		$this->collC006tEvidenciasRelatedByCoCustodio = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC006tEvidenciasRelatedByCoCustodio collection (array).
	 *
	 * By default this just sets the collC006tEvidenciasRelatedByCoCustodio collection to an empty array (like clearcollC006tEvidenciasRelatedByCoCustodio());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC006tEvidenciasRelatedByCoCustodio()
	{
		$this->collC006tEvidenciasRelatedByCoCustodio = array();
	}

	/**
	 * Gets an array of C006tEvidencia objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J812Persona has previously been saved, it will retrieve
	 * related C006tEvidenciasRelatedByCoCustodio from storage. If this J812Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C006tEvidencia[]
	 * @throws     PropelException
	 */
	public function getC006tEvidenciasRelatedByCoCustodio($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			if ($this->isNew()) {
			   $this->collC006tEvidenciasRelatedByCoCustodio = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				if (!isset($this->lastC006tEvidenciaRelatedByCoCustodioCriteria) || !$this->lastC006tEvidenciaRelatedByCoCustodioCriteria->equals($criteria)) {
					$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCustodioCriteria = $criteria;
		return $this->collC006tEvidenciasRelatedByCoCustodio;
	}

	/**
	 * Returns the number of related C006tEvidencia objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C006tEvidencia objects.
	 * @throws     PropelException
	 */
	public function countC006tEvidenciasRelatedByCoCustodio(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				$count = C006tEvidenciaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				if (!isset($this->lastC006tEvidenciaRelatedByCoCustodioCriteria) || !$this->lastC006tEvidenciaRelatedByCoCustodioCriteria->equals($criteria)) {
					$count = C006tEvidenciaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC006tEvidenciasRelatedByCoCustodio);
				}
			} else {
				$count = count($this->collC006tEvidenciasRelatedByCoCustodio);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C006tEvidencia object to this object
	 * through the C006tEvidencia foreign key attribute.
	 *
	 * @param      C006tEvidencia $l C006tEvidencia
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC006tEvidenciaRelatedByCoCustodio(C006tEvidencia $l)
	{
		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			$this->initC006tEvidenciasRelatedByCoCustodio();
		}
		if (!in_array($l, $this->collC006tEvidenciasRelatedByCoCustodio, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC006tEvidenciasRelatedByCoCustodio, $l);
			$l->setJ812PersonaRelatedByCoCustodio($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCustodio from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCustodioJoinJ811tUsuarioRelatedByCoRegistra($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCustodio = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoRegistra($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCustodioCriteria) || !$this->lastC006tEvidenciaRelatedByCoCustodioCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoRegistra($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCustodioCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCustodio;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCustodio from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCustodioJoinC003tActaAcc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCustodio = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCustodioCriteria) || !$this->lastC006tEvidenciaRelatedByCoCustodioCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCustodioCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCustodio;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCustodio from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCustodioJoinC004tActaAie($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCustodio = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCustodioCriteria) || !$this->lastC006tEvidenciaRelatedByCoCustodioCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCustodioCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCustodio;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCustodio from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCustodioJoinJ811tUsuarioRelatedByCoColecta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCustodio = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoColecta($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCustodioCriteria) || !$this->lastC006tEvidenciaRelatedByCoCustodioCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoColecta($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCustodioCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCustodio;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCustodio from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCustodioJoinJ002tTipoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCustodio = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCustodioCriteria) || !$this->lastC006tEvidenciaRelatedByCoCustodioCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCustodioCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCustodio;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCustodio from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCustodioJoinJ003tEstadoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCustodio = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCustodioCriteria) || !$this->lastC006tEvidenciaRelatedByCoCustodioCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCustodioCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCustodio;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCustodio from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCustodioJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCustodio = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCustodioCriteria) || !$this->lastC006tEvidenciaRelatedByCoCustodioCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCustodioCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCustodio;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCustodio from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCustodioJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCustodio = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCustodioCriteria) || !$this->lastC006tEvidenciaRelatedByCoCustodioCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCustodioCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCustodio;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCustodio from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCustodioJoinJ811tUsuarioRelatedByCoEntregadoFueraSti($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCustodio === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCustodio = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoEntregadoFueraSti($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCustodioCriteria) || !$this->lastC006tEvidenciaRelatedByCoCustodioCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCustodio = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoEntregadoFueraSti($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCustodioCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCustodio;
	}

	/**
	 * Clears out the collC006tEvidenciasRelatedByCoCreatedAt collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC006tEvidenciasRelatedByCoCreatedAt()
	 */
	public function clearC006tEvidenciasRelatedByCoCreatedAt()
	{
		$this->collC006tEvidenciasRelatedByCoCreatedAt = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC006tEvidenciasRelatedByCoCreatedAt collection (array).
	 *
	 * By default this just sets the collC006tEvidenciasRelatedByCoCreatedAt collection to an empty array (like clearcollC006tEvidenciasRelatedByCoCreatedAt());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC006tEvidenciasRelatedByCoCreatedAt()
	{
		$this->collC006tEvidenciasRelatedByCoCreatedAt = array();
	}

	/**
	 * Gets an array of C006tEvidencia objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J812Persona has previously been saved, it will retrieve
	 * related C006tEvidenciasRelatedByCoCreatedAt from storage. If this J812Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C006tEvidencia[]
	 * @throws     PropelException
	 */
	public function getC006tEvidenciasRelatedByCoCreatedAt($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			if ($this->isNew()) {
			   $this->collC006tEvidenciasRelatedByCoCreatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				if (!isset($this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria->equals($criteria)) {
					$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria = $criteria;
		return $this->collC006tEvidenciasRelatedByCoCreatedAt;
	}

	/**
	 * Returns the number of related C006tEvidencia objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C006tEvidencia objects.
	 * @throws     PropelException
	 */
	public function countC006tEvidenciasRelatedByCoCreatedAt(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				$count = C006tEvidenciaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				if (!isset($this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria->equals($criteria)) {
					$count = C006tEvidenciaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC006tEvidenciasRelatedByCoCreatedAt);
				}
			} else {
				$count = count($this->collC006tEvidenciasRelatedByCoCreatedAt);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C006tEvidencia object to this object
	 * through the C006tEvidencia foreign key attribute.
	 *
	 * @param      C006tEvidencia $l C006tEvidencia
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC006tEvidenciaRelatedByCoCreatedAt(C006tEvidencia $l)
	{
		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			$this->initC006tEvidenciasRelatedByCoCreatedAt();
		}
		if (!in_array($l, $this->collC006tEvidenciasRelatedByCoCreatedAt, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC006tEvidenciasRelatedByCoCreatedAt, $l);
			$l->setJ812PersonaRelatedByCoCreatedAt($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCreatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCreatedAtJoinJ811tUsuarioRelatedByCoRegistra($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoRegistra($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoRegistra($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCreatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCreatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCreatedAtJoinC003tActaAcc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCreatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCreatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCreatedAtJoinC004tActaAie($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCreatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCreatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCreatedAtJoinJ811tUsuarioRelatedByCoColecta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoColecta($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoColecta($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCreatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCreatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCreatedAtJoinJ002tTipoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCreatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCreatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCreatedAtJoinJ003tEstadoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCreatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCreatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCreatedAtJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCreatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCreatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCreatedAtJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCreatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoCreatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoCreatedAtJoinJ811tUsuarioRelatedByCoEntregadoFueraSti($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoCreatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoEntregadoFueraSti($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_CREATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoCreatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoEntregadoFueraSti($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoCreatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoCreatedAt;
	}

	/**
	 * Clears out the collC006tEvidenciasRelatedByCoUpdatedAt collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addC006tEvidenciasRelatedByCoUpdatedAt()
	 */
	public function clearC006tEvidenciasRelatedByCoUpdatedAt()
	{
		$this->collC006tEvidenciasRelatedByCoUpdatedAt = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collC006tEvidenciasRelatedByCoUpdatedAt collection (array).
	 *
	 * By default this just sets the collC006tEvidenciasRelatedByCoUpdatedAt collection to an empty array (like clearcollC006tEvidenciasRelatedByCoUpdatedAt());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initC006tEvidenciasRelatedByCoUpdatedAt()
	{
		$this->collC006tEvidenciasRelatedByCoUpdatedAt = array();
	}

	/**
	 * Gets an array of C006tEvidencia objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J812Persona has previously been saved, it will retrieve
	 * related C006tEvidenciasRelatedByCoUpdatedAt from storage. If this J812Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array C006tEvidencia[]
	 * @throws     PropelException
	 */
	public function getC006tEvidenciasRelatedByCoUpdatedAt($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			if ($this->isNew()) {
			   $this->collC006tEvidenciasRelatedByCoUpdatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				C006tEvidenciaPeer::addSelectColumns($criteria);
				if (!isset($this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria->equals($criteria)) {
					$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = $criteria;
		return $this->collC006tEvidenciasRelatedByCoUpdatedAt;
	}

	/**
	 * Returns the number of related C006tEvidencia objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related C006tEvidencia objects.
	 * @throws     PropelException
	 */
	public function countC006tEvidenciasRelatedByCoUpdatedAt(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				$count = C006tEvidenciaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				if (!isset($this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria->equals($criteria)) {
					$count = C006tEvidenciaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collC006tEvidenciasRelatedByCoUpdatedAt);
				}
			} else {
				$count = count($this->collC006tEvidenciasRelatedByCoUpdatedAt);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a C006tEvidencia object to this object
	 * through the C006tEvidencia foreign key attribute.
	 *
	 * @param      C006tEvidencia $l C006tEvidencia
	 * @return     void
	 * @throws     PropelException
	 */
	public function addC006tEvidenciaRelatedByCoUpdatedAt(C006tEvidencia $l)
	{
		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			$this->initC006tEvidenciasRelatedByCoUpdatedAt();
		}
		if (!in_array($l, $this->collC006tEvidenciasRelatedByCoUpdatedAt, true)) { // only add it if the **same** object is not already associated
			array_push($this->collC006tEvidenciasRelatedByCoUpdatedAt, $l);
			$l->setJ812PersonaRelatedByCoUpdatedAt($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoUpdatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoUpdatedAtJoinJ811tUsuarioRelatedByCoRegistra($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoRegistra($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoRegistra($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoUpdatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoUpdatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoUpdatedAtJoinC003tActaAcc($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinC003tActaAcc($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoUpdatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoUpdatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoUpdatedAtJoinC004tActaAie($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinC004tActaAie($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoUpdatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoUpdatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoUpdatedAtJoinJ811tUsuarioRelatedByCoColecta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoColecta($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoColecta($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoUpdatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoUpdatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoUpdatedAtJoinJ002tTipoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ002tTipoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoUpdatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoUpdatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoUpdatedAtJoinJ003tEstadoEvidencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ003tEstadoEvidencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoUpdatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoUpdatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoUpdatedAtJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoUpdatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoUpdatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoUpdatedAtJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoUpdatedAt;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related C006tEvidenciasRelatedByCoUpdatedAt from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getC006tEvidenciasRelatedByCoUpdatedAtJoinJ811tUsuarioRelatedByCoEntregadoFueraSti($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collC006tEvidenciasRelatedByCoUpdatedAt === null) {
			if ($this->isNew()) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = array();
			} else {

				$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoEntregadoFueraSti($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(C006tEvidenciaPeer::CO_UPDATED_AT, $this->co_persona);

			if (!isset($this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria) || !$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria->equals($criteria)) {
				$this->collC006tEvidenciasRelatedByCoUpdatedAt = C006tEvidenciaPeer::doSelectJoinJ811tUsuarioRelatedByCoEntregadoFueraSti($criteria, $con, $join_behavior);
			}
		}
		$this->lastC006tEvidenciaRelatedByCoUpdatedAtCriteria = $criteria;

		return $this->collC006tEvidenciasRelatedByCoUpdatedAt;
	}

	/**
	 * Clears out the collJ006tLugarSeguros collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ006tLugarSeguros()
	 */
	public function clearJ006tLugarSeguros()
	{
		$this->collJ006tLugarSeguros = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ006tLugarSeguros collection (array).
	 *
	 * By default this just sets the collJ006tLugarSeguros collection to an empty array (like clearcollJ006tLugarSeguros());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ006tLugarSeguros()
	{
		$this->collJ006tLugarSeguros = array();
	}

	/**
	 * Gets an array of J006tLugarSeguro objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J812Persona has previously been saved, it will retrieve
	 * related J006tLugarSeguros from storage. If this J812Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J006tLugarSeguro[]
	 * @throws     PropelException
	 */
	public function getJ006tLugarSeguros($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ006tLugarSeguros === null) {
			if ($this->isNew()) {
			   $this->collJ006tLugarSeguros = array();
			} else {

				$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

				J006tLugarSeguroPeer::addSelectColumns($criteria);
				$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

				J006tLugarSeguroPeer::addSelectColumns($criteria);
				if (!isset($this->lastJ006tLugarSeguroCriteria) || !$this->lastJ006tLugarSeguroCriteria->equals($criteria)) {
					$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ006tLugarSeguroCriteria = $criteria;
		return $this->collJ006tLugarSeguros;
	}

	/**
	 * Returns the number of related J006tLugarSeguro objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J006tLugarSeguro objects.
	 * @throws     PropelException
	 */
	public function countJ006tLugarSeguros(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ006tLugarSeguros === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

				$count = J006tLugarSeguroPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

				if (!isset($this->lastJ006tLugarSeguroCriteria) || !$this->lastJ006tLugarSeguroCriteria->equals($criteria)) {
					$count = J006tLugarSeguroPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ006tLugarSeguros);
				}
			} else {
				$count = count($this->collJ006tLugarSeguros);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J006tLugarSeguro object to this object
	 * through the J006tLugarSeguro foreign key attribute.
	 *
	 * @param      J006tLugarSeguro $l J006tLugarSeguro
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ006tLugarSeguro(J006tLugarSeguro $l)
	{
		if ($this->collJ006tLugarSeguros === null) {
			$this->initJ006tLugarSeguros();
		}
		if (!in_array($l, $this->collJ006tLugarSeguros, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ006tLugarSeguros, $l);
			$l->setJ812Persona($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related J006tLugarSeguros from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getJ006tLugarSegurosJoinJ804tGerencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ006tLugarSeguros === null) {
			if ($this->isNew()) {
				$this->collJ006tLugarSeguros = array();
			} else {

				$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

				$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelectJoinJ804tGerencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastJ006tLugarSeguroCriteria) || !$this->lastJ006tLugarSeguroCriteria->equals($criteria)) {
				$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelectJoinJ804tGerencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ006tLugarSeguroCriteria = $criteria;

		return $this->collJ006tLugarSeguros;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related J006tLugarSeguros from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getJ006tLugarSegurosJoinJ802tClasificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ006tLugarSeguros === null) {
			if ($this->isNew()) {
				$this->collJ006tLugarSeguros = array();
			} else {

				$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

				$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastJ006tLugarSeguroCriteria) || !$this->lastJ006tLugarSeguroCriteria->equals($criteria)) {
				$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelectJoinJ802tClasificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ006tLugarSeguroCriteria = $criteria;

		return $this->collJ006tLugarSeguros;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related J006tLugarSeguros from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getJ006tLugarSegurosJoinC801tTransaccion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ006tLugarSeguros === null) {
			if ($this->isNew()) {
				$this->collJ006tLugarSeguros = array();
			} else {

				$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

				$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastJ006tLugarSeguroCriteria) || !$this->lastJ006tLugarSeguroCriteria->equals($criteria)) {
				$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelectJoinC801tTransaccion($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ006tLugarSeguroCriteria = $criteria;

		return $this->collJ006tLugarSeguros;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related J006tLugarSeguros from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getJ006tLugarSegurosJoinJ806tCiudad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ006tLugarSeguros === null) {
			if ($this->isNew()) {
				$this->collJ006tLugarSeguros = array();
			} else {

				$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

				$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelectJoinJ806tCiudad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastJ006tLugarSeguroCriteria) || !$this->lastJ006tLugarSeguroCriteria->equals($criteria)) {
				$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelectJoinJ806tCiudad($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ006tLugarSeguroCriteria = $criteria;

		return $this->collJ006tLugarSeguros;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related J006tLugarSeguros from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getJ006tLugarSegurosJoinJ807tLocalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ006tLugarSeguros === null) {
			if ($this->isNew()) {
				$this->collJ006tLugarSeguros = array();
			} else {

				$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

				$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelectJoinJ807tLocalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J006tLugarSeguroPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastJ006tLugarSeguroCriteria) || !$this->lastJ006tLugarSeguroCriteria->equals($criteria)) {
				$this->collJ006tLugarSeguros = J006tLugarSeguroPeer::doSelectJoinJ807tLocalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ006tLugarSeguroCriteria = $criteria;

		return $this->collJ006tLugarSeguros;
	}

	/**
	 * Clears out the collJ007tRepositorioDigitals collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ007tRepositorioDigitals()
	 */
	public function clearJ007tRepositorioDigitals()
	{
		$this->collJ007tRepositorioDigitals = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ007tRepositorioDigitals collection (array).
	 *
	 * By default this just sets the collJ007tRepositorioDigitals collection to an empty array (like clearcollJ007tRepositorioDigitals());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ007tRepositorioDigitals()
	{
		$this->collJ007tRepositorioDigitals = array();
	}

	/**
	 * Gets an array of J007tRepositorioDigital objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J812Persona has previously been saved, it will retrieve
	 * related J007tRepositorioDigitals from storage. If this J812Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J007tRepositorioDigital[]
	 * @throws     PropelException
	 */
	public function getJ007tRepositorioDigitals($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ007tRepositorioDigitals === null) {
			if ($this->isNew()) {
			   $this->collJ007tRepositorioDigitals = array();
			} else {

				$criteria->add(J007tRepositorioDigitalPeer::CO_CUSTODIO, $this->co_persona);

				J007tRepositorioDigitalPeer::addSelectColumns($criteria);
				$this->collJ007tRepositorioDigitals = J007tRepositorioDigitalPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J007tRepositorioDigitalPeer::CO_CUSTODIO, $this->co_persona);

				J007tRepositorioDigitalPeer::addSelectColumns($criteria);
				if (!isset($this->lastJ007tRepositorioDigitalCriteria) || !$this->lastJ007tRepositorioDigitalCriteria->equals($criteria)) {
					$this->collJ007tRepositorioDigitals = J007tRepositorioDigitalPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ007tRepositorioDigitalCriteria = $criteria;
		return $this->collJ007tRepositorioDigitals;
	}

	/**
	 * Returns the number of related J007tRepositorioDigital objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J007tRepositorioDigital objects.
	 * @throws     PropelException
	 */
	public function countJ007tRepositorioDigitals(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ007tRepositorioDigitals === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J007tRepositorioDigitalPeer::CO_CUSTODIO, $this->co_persona);

				$count = J007tRepositorioDigitalPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J007tRepositorioDigitalPeer::CO_CUSTODIO, $this->co_persona);

				if (!isset($this->lastJ007tRepositorioDigitalCriteria) || !$this->lastJ007tRepositorioDigitalCriteria->equals($criteria)) {
					$count = J007tRepositorioDigitalPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ007tRepositorioDigitals);
				}
			} else {
				$count = count($this->collJ007tRepositorioDigitals);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J007tRepositorioDigital object to this object
	 * through the J007tRepositorioDigital foreign key attribute.
	 *
	 * @param      J007tRepositorioDigital $l J007tRepositorioDigital
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ007tRepositorioDigital(J007tRepositorioDigital $l)
	{
		if ($this->collJ007tRepositorioDigitals === null) {
			$this->initJ007tRepositorioDigitals();
		}
		if (!in_array($l, $this->collJ007tRepositorioDigitals, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ007tRepositorioDigitals, $l);
			$l->setJ812Persona($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related J007tRepositorioDigitals from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getJ007tRepositorioDigitalsJoinJ804tGerencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ007tRepositorioDigitals === null) {
			if ($this->isNew()) {
				$this->collJ007tRepositorioDigitals = array();
			} else {

				$criteria->add(J007tRepositorioDigitalPeer::CO_CUSTODIO, $this->co_persona);

				$this->collJ007tRepositorioDigitals = J007tRepositorioDigitalPeer::doSelectJoinJ804tGerencia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J007tRepositorioDigitalPeer::CO_CUSTODIO, $this->co_persona);

			if (!isset($this->lastJ007tRepositorioDigitalCriteria) || !$this->lastJ007tRepositorioDigitalCriteria->equals($criteria)) {
				$this->collJ007tRepositorioDigitals = J007tRepositorioDigitalPeer::doSelectJoinJ804tGerencia($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ007tRepositorioDigitalCriteria = $criteria;

		return $this->collJ007tRepositorioDigitals;
	}

	/**
	 * Clears out the collJ811tUsuarios collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJ811tUsuarios()
	 */
	public function clearJ811tUsuarios()
	{
		$this->collJ811tUsuarios = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJ811tUsuarios collection (array).
	 *
	 * By default this just sets the collJ811tUsuarios collection to an empty array (like clearcollJ811tUsuarios());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJ811tUsuarios()
	{
		$this->collJ811tUsuarios = array();
	}

	/**
	 * Gets an array of J811tUsuario objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this J812Persona has previously been saved, it will retrieve
	 * related J811tUsuarios from storage. If this J812Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array J811tUsuario[]
	 * @throws     PropelException
	 */
	public function getJ811tUsuarios($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ811tUsuarios === null) {
			if ($this->isNew()) {
			   $this->collJ811tUsuarios = array();
			} else {

				$criteria->add(J811tUsuarioPeer::CO_PERSONA, $this->co_persona);

				J811tUsuarioPeer::addSelectColumns($criteria);
				$this->collJ811tUsuarios = J811tUsuarioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(J811tUsuarioPeer::CO_PERSONA, $this->co_persona);

				J811tUsuarioPeer::addSelectColumns($criteria);
				if (!isset($this->lastJ811tUsuarioCriteria) || !$this->lastJ811tUsuarioCriteria->equals($criteria)) {
					$this->collJ811tUsuarios = J811tUsuarioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJ811tUsuarioCriteria = $criteria;
		return $this->collJ811tUsuarios;
	}

	/**
	 * Returns the number of related J811tUsuario objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related J811tUsuario objects.
	 * @throws     PropelException
	 */
	public function countJ811tUsuarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJ811tUsuarios === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(J811tUsuarioPeer::CO_PERSONA, $this->co_persona);

				$count = J811tUsuarioPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(J811tUsuarioPeer::CO_PERSONA, $this->co_persona);

				if (!isset($this->lastJ811tUsuarioCriteria) || !$this->lastJ811tUsuarioCriteria->equals($criteria)) {
					$count = J811tUsuarioPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJ811tUsuarios);
				}
			} else {
				$count = count($this->collJ811tUsuarios);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a J811tUsuario object to this object
	 * through the J811tUsuario foreign key attribute.
	 *
	 * @param      J811tUsuario $l J811tUsuario
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJ811tUsuario(J811tUsuario $l)
	{
		if ($this->collJ811tUsuarios === null) {
			$this->initJ811tUsuarios();
		}
		if (!in_array($l, $this->collJ811tUsuarios, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJ811tUsuarios, $l);
			$l->setJ812Persona($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this J812Persona is new, it will return
	 * an empty collection; or if this J812Persona has previously
	 * been saved, it will retrieve related J811tUsuarios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in J812Persona.
	 */
	public function getJ811tUsuariosJoinJ809tRol($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(J812PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJ811tUsuarios === null) {
			if ($this->isNew()) {
				$this->collJ811tUsuarios = array();
			} else {

				$criteria->add(J811tUsuarioPeer::CO_PERSONA, $this->co_persona);

				$this->collJ811tUsuarios = J811tUsuarioPeer::doSelectJoinJ809tRol($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(J811tUsuarioPeer::CO_PERSONA, $this->co_persona);

			if (!isset($this->lastJ811tUsuarioCriteria) || !$this->lastJ811tUsuarioCriteria->equals($criteria)) {
				$this->collJ811tUsuarios = J811tUsuarioPeer::doSelectJoinJ809tRol($criteria, $con, $join_behavior);
			}
		}
		$this->lastJ811tUsuarioCriteria = $criteria;

		return $this->collJ811tUsuarios;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collC003tActaAccs) {
				foreach ((array) $this->collC003tActaAccs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC004tActaAies) {
				foreach ((array) $this->collC004tActaAies as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC005tActaAnies) {
				foreach ((array) $this->collC005tActaAnies as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC006tEvidenciasRelatedByCoCustodio) {
				foreach ((array) $this->collC006tEvidenciasRelatedByCoCustodio as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC006tEvidenciasRelatedByCoCreatedAt) {
				foreach ((array) $this->collC006tEvidenciasRelatedByCoCreatedAt as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collC006tEvidenciasRelatedByCoUpdatedAt) {
				foreach ((array) $this->collC006tEvidenciasRelatedByCoUpdatedAt as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ006tLugarSeguros) {
				foreach ((array) $this->collJ006tLugarSeguros as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ007tRepositorioDigitals) {
				foreach ((array) $this->collJ007tRepositorioDigitals as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJ811tUsuarios) {
				foreach ((array) $this->collJ811tUsuarios as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collC003tActaAccs = null;
		$this->collC004tActaAies = null;
		$this->collC005tActaAnies = null;
		$this->collC006tEvidenciasRelatedByCoCustodio = null;
		$this->collC006tEvidenciasRelatedByCoCreatedAt = null;
		$this->collC006tEvidenciasRelatedByCoUpdatedAt = null;
		$this->collJ006tLugarSeguros = null;
		$this->collJ007tRepositorioDigitals = null;
		$this->collJ811tUsuarios = null;
			$this->aJ815tDivision = null;
			$this->aJ809tRol = null;
			$this->aJ813tRegion = null;
			$this->aJ814tNegocio = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseJ812Persona:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseJ812Persona::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseJ812Persona
