<?php

/**
 * Base static class for performing query and update operations on the 'c006t_evidencia' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Sat Nov 14 07:33:31 2015
 *
 * @package    lib.model.om
 */
abstract class BaseC006tEvidenciaPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'c006t_evidencia';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.C006tEvidencia';

	/** The total number of columns. */
	const NUM_COLUMNS = 29;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the CO_EVIDENCIA field */
	const CO_EVIDENCIA = 'c006t_evidencia.CO_EVIDENCIA';

	/** the column name for the FE_REGISTRO field */
	const FE_REGISTRO = 'c006t_evidencia.FE_REGISTRO';

	/** the column name for the CO_REGISTRA field */
	const CO_REGISTRA = 'c006t_evidencia.CO_REGISTRA';

	/** the column name for the CO_ACC field */
	const CO_ACC = 'c006t_evidencia.CO_ACC';

	/** the column name for the CO_AIE field */
	const CO_AIE = 'c006t_evidencia.CO_AIE';

	/** the column name for the TX_DESCRIPCION_COLECCION field */
	const TX_DESCRIPCION_COLECCION = 'c006t_evidencia.TX_DESCRIPCION_COLECCION';

	/** the column name for the FE_COLECCION_EVIDENCIA field */
	const FE_COLECCION_EVIDENCIA = 'c006t_evidencia.FE_COLECCION_EVIDENCIA';

	/** the column name for the CO_COLECTA field */
	const CO_COLECTA = 'c006t_evidencia.CO_COLECTA';

	/** the column name for the CO_RECURSO field */
	const CO_RECURSO = 'c006t_evidencia.CO_RECURSO';

	/** the column name for the TX_NOMBRE_RECURSO field */
	const TX_NOMBRE_RECURSO = 'c006t_evidencia.TX_NOMBRE_RECURSO';

	/** the column name for the TX_SERIAL_RECURSO field */
	const TX_SERIAL_RECURSO = 'c006t_evidencia.TX_SERIAL_RECURSO';

	/** the column name for the TX_MARCA_RECURSO field */
	const TX_MARCA_RECURSO = 'c006t_evidencia.TX_MARCA_RECURSO';

	/** the column name for the TX_MODELO_RECURSO field */
	const TX_MODELO_RECURSO = 'c006t_evidencia.TX_MODELO_RECURSO';

	/** the column name for the TX_NUMERO_ACTIVO field */
	const TX_NUMERO_ACTIVO = 'c006t_evidencia.TX_NUMERO_ACTIVO';

	/** the column name for the CO_TIPO_EVIDENCIA field */
	const CO_TIPO_EVIDENCIA = 'c006t_evidencia.CO_TIPO_EVIDENCIA';

	/** the column name for the CO_ESTADO_EVIDENCIA field */
	const CO_ESTADO_EVIDENCIA = 'c006t_evidencia.CO_ESTADO_EVIDENCIA';

	/** the column name for the CO_LUGAR_SEGURO field */
	const CO_LUGAR_SEGURO = 'c006t_evidencia.CO_LUGAR_SEGURO';

	/** the column name for the CO_REPOSITORIO field */
	const CO_REPOSITORIO = 'c006t_evidencia.CO_REPOSITORIO';

	/** the column name for the CO_CUSTODIO_STI field */
	const CO_CUSTODIO_STI = 'c006t_evidencia.CO_CUSTODIO_STI';

	/** the column name for the TX_OBSERVACIONES field */
	const TX_OBSERVACIONES = 'c006t_evidencia.TX_OBSERVACIONES';

	/** the column name for the IN_ABIERTA field */
	const IN_ABIERTA = 'c006t_evidencia.IN_ABIERTA';

	/** the column name for the CO_CLASIFICACION field */
	const CO_CLASIFICACION = 'c006t_evidencia.CO_CLASIFICACION';

	/** the column name for the CO_TRANSACCION field */
	const CO_TRANSACCION = 'c006t_evidencia.CO_TRANSACCION';

	/** the column name for the CREATED_AT field */
	const CREATED_AT = 'c006t_evidencia.CREATED_AT';

	/** the column name for the UPDATED_AT field */
	const UPDATED_AT = 'c006t_evidencia.UPDATED_AT';

	/** the column name for the CO_ENTREGADO_FUERA_STI field */
	const CO_ENTREGADO_FUERA_STI = 'c006t_evidencia.CO_ENTREGADO_FUERA_STI';

	/** the column name for the CO_CUSTODIO field */
	const CO_CUSTODIO = 'c006t_evidencia.CO_CUSTODIO';

	/** the column name for the CO_CREATED_AT field */
	const CO_CREATED_AT = 'c006t_evidencia.CO_CREATED_AT';

	/** the column name for the CO_UPDATED_AT field */
	const CO_UPDATED_AT = 'c006t_evidencia.CO_UPDATED_AT';

	/**
	 * An identiy map to hold any loaded instances of C006tEvidencia objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array C006tEvidencia[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('CoEvidencia', 'FeRegistro', 'CoRegistra', 'CoAcc', 'CoAie', 'TxDescripcionColeccion', 'FeColeccionEvidencia', 'CoColecta', 'CoRecurso', 'TxNombreRecurso', 'TxSerialRecurso', 'TxMarcaRecurso', 'TxModeloRecurso', 'TxNumeroActivo', 'CoTipoEvidencia', 'CoEstadoEvidencia', 'CoLugarSeguro', 'CoRepositorio', 'CoCustodioSti', 'TxObservaciones', 'InAbierta', 'CoClasificacion', 'CoTransaccion', 'CreatedAt', 'UpdatedAt', 'CoEntregadoFueraSti', 'CoCustodio', 'CoCreatedAt', 'CoUpdatedAt', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('coEvidencia', 'feRegistro', 'coRegistra', 'coAcc', 'coAie', 'txDescripcionColeccion', 'feColeccionEvidencia', 'coColecta', 'coRecurso', 'txNombreRecurso', 'txSerialRecurso', 'txMarcaRecurso', 'txModeloRecurso', 'txNumeroActivo', 'coTipoEvidencia', 'coEstadoEvidencia', 'coLugarSeguro', 'coRepositorio', 'coCustodioSti', 'txObservaciones', 'inAbierta', 'coClasificacion', 'coTransaccion', 'createdAt', 'updatedAt', 'coEntregadoFueraSti', 'coCustodio', 'coCreatedAt', 'coUpdatedAt', ),
		BasePeer::TYPE_COLNAME => array (self::CO_EVIDENCIA, self::FE_REGISTRO, self::CO_REGISTRA, self::CO_ACC, self::CO_AIE, self::TX_DESCRIPCION_COLECCION, self::FE_COLECCION_EVIDENCIA, self::CO_COLECTA, self::CO_RECURSO, self::TX_NOMBRE_RECURSO, self::TX_SERIAL_RECURSO, self::TX_MARCA_RECURSO, self::TX_MODELO_RECURSO, self::TX_NUMERO_ACTIVO, self::CO_TIPO_EVIDENCIA, self::CO_ESTADO_EVIDENCIA, self::CO_LUGAR_SEGURO, self::CO_REPOSITORIO, self::CO_CUSTODIO_STI, self::TX_OBSERVACIONES, self::IN_ABIERTA, self::CO_CLASIFICACION, self::CO_TRANSACCION, self::CREATED_AT, self::UPDATED_AT, self::CO_ENTREGADO_FUERA_STI, self::CO_CUSTODIO, self::CO_CREATED_AT, self::CO_UPDATED_AT, ),
		BasePeer::TYPE_FIELDNAME => array ('co_evidencia', 'fe_registro', 'co_registra', 'co_acc', 'co_aie', 'tx_descripcion_coleccion', 'fe_coleccion_evidencia', 'co_colecta', 'co_recurso', 'tx_nombre_recurso', 'tx_serial_recurso', 'tx_marca_recurso', 'tx_modelo_recurso', 'tx_numero_activo', 'co_tipo_evidencia', 'co_estado_evidencia', 'co_lugar_seguro', 'co_repositorio', 'co_custodio_sti', 'tx_observaciones', 'in_abierta', 'co_clasificacion', 'co_transaccion', 'created_at', 'updated_at', 'co_entregado_fuera_sti', 'co_custodio', 'co_created_at', 'co_updated_at', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('CoEvidencia' => 0, 'FeRegistro' => 1, 'CoRegistra' => 2, 'CoAcc' => 3, 'CoAie' => 4, 'TxDescripcionColeccion' => 5, 'FeColeccionEvidencia' => 6, 'CoColecta' => 7, 'CoRecurso' => 8, 'TxNombreRecurso' => 9, 'TxSerialRecurso' => 10, 'TxMarcaRecurso' => 11, 'TxModeloRecurso' => 12, 'TxNumeroActivo' => 13, 'CoTipoEvidencia' => 14, 'CoEstadoEvidencia' => 15, 'CoLugarSeguro' => 16, 'CoRepositorio' => 17, 'CoCustodioSti' => 18, 'TxObservaciones' => 19, 'InAbierta' => 20, 'CoClasificacion' => 21, 'CoTransaccion' => 22, 'CreatedAt' => 23, 'UpdatedAt' => 24, 'CoEntregadoFueraSti' => 25, 'CoCustodio' => 26, 'CoCreatedAt' => 27, 'CoUpdatedAt' => 28, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('coEvidencia' => 0, 'feRegistro' => 1, 'coRegistra' => 2, 'coAcc' => 3, 'coAie' => 4, 'txDescripcionColeccion' => 5, 'feColeccionEvidencia' => 6, 'coColecta' => 7, 'coRecurso' => 8, 'txNombreRecurso' => 9, 'txSerialRecurso' => 10, 'txMarcaRecurso' => 11, 'txModeloRecurso' => 12, 'txNumeroActivo' => 13, 'coTipoEvidencia' => 14, 'coEstadoEvidencia' => 15, 'coLugarSeguro' => 16, 'coRepositorio' => 17, 'coCustodioSti' => 18, 'txObservaciones' => 19, 'inAbierta' => 20, 'coClasificacion' => 21, 'coTransaccion' => 22, 'createdAt' => 23, 'updatedAt' => 24, 'coEntregadoFueraSti' => 25, 'coCustodio' => 26, 'coCreatedAt' => 27, 'coUpdatedAt' => 28, ),
		BasePeer::TYPE_COLNAME => array (self::CO_EVIDENCIA => 0, self::FE_REGISTRO => 1, self::CO_REGISTRA => 2, self::CO_ACC => 3, self::CO_AIE => 4, self::TX_DESCRIPCION_COLECCION => 5, self::FE_COLECCION_EVIDENCIA => 6, self::CO_COLECTA => 7, self::CO_RECURSO => 8, self::TX_NOMBRE_RECURSO => 9, self::TX_SERIAL_RECURSO => 10, self::TX_MARCA_RECURSO => 11, self::TX_MODELO_RECURSO => 12, self::TX_NUMERO_ACTIVO => 13, self::CO_TIPO_EVIDENCIA => 14, self::CO_ESTADO_EVIDENCIA => 15, self::CO_LUGAR_SEGURO => 16, self::CO_REPOSITORIO => 17, self::CO_CUSTODIO_STI => 18, self::TX_OBSERVACIONES => 19, self::IN_ABIERTA => 20, self::CO_CLASIFICACION => 21, self::CO_TRANSACCION => 22, self::CREATED_AT => 23, self::UPDATED_AT => 24, self::CO_ENTREGADO_FUERA_STI => 25, self::CO_CUSTODIO => 26, self::CO_CREATED_AT => 27, self::CO_UPDATED_AT => 28, ),
		BasePeer::TYPE_FIELDNAME => array ('co_evidencia' => 0, 'fe_registro' => 1, 'co_registra' => 2, 'co_acc' => 3, 'co_aie' => 4, 'tx_descripcion_coleccion' => 5, 'fe_coleccion_evidencia' => 6, 'co_colecta' => 7, 'co_recurso' => 8, 'tx_nombre_recurso' => 9, 'tx_serial_recurso' => 10, 'tx_marca_recurso' => 11, 'tx_modelo_recurso' => 12, 'tx_numero_activo' => 13, 'co_tipo_evidencia' => 14, 'co_estado_evidencia' => 15, 'co_lugar_seguro' => 16, 'co_repositorio' => 17, 'co_custodio_sti' => 18, 'tx_observaciones' => 19, 'in_abierta' => 20, 'co_clasificacion' => 21, 'co_transaccion' => 22, 'created_at' => 23, 'updated_at' => 24, 'co_entregado_fuera_sti' => 25, 'co_custodio' => 26, 'co_created_at' => 27, 'co_updated_at' => 28, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new C006tEvidenciaMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. C006tEvidenciaPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(C006tEvidenciaPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_EVIDENCIA);

		$criteria->addSelectColumn(C006tEvidenciaPeer::FE_REGISTRO);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_REGISTRA);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_ACC);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_AIE);

		$criteria->addSelectColumn(C006tEvidenciaPeer::TX_DESCRIPCION_COLECCION);

		$criteria->addSelectColumn(C006tEvidenciaPeer::FE_COLECCION_EVIDENCIA);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_COLECTA);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_RECURSO);

		$criteria->addSelectColumn(C006tEvidenciaPeer::TX_NOMBRE_RECURSO);

		$criteria->addSelectColumn(C006tEvidenciaPeer::TX_SERIAL_RECURSO);

		$criteria->addSelectColumn(C006tEvidenciaPeer::TX_MARCA_RECURSO);

		$criteria->addSelectColumn(C006tEvidenciaPeer::TX_MODELO_RECURSO);

		$criteria->addSelectColumn(C006tEvidenciaPeer::TX_NUMERO_ACTIVO);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_LUGAR_SEGURO);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_REPOSITORIO);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_CUSTODIO_STI);

		$criteria->addSelectColumn(C006tEvidenciaPeer::TX_OBSERVACIONES);

		$criteria->addSelectColumn(C006tEvidenciaPeer::IN_ABIERTA);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_CLASIFICACION);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_TRANSACCION);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CREATED_AT);

		$criteria->addSelectColumn(C006tEvidenciaPeer::UPDATED_AT);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_CUSTODIO);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_CREATED_AT);

		$criteria->addSelectColumn(C006tEvidenciaPeer::CO_UPDATED_AT);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     C006tEvidencia
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = C006tEvidenciaPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return C006tEvidenciaPeer::populateObjects(C006tEvidenciaPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      C006tEvidencia $value A C006tEvidencia object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(C006tEvidencia $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getCoEvidencia();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A C006tEvidencia object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof C006tEvidencia) {
				$key = (string) $value->getCoEvidencia();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or C006tEvidencia object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     C006tEvidencia Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = C006tEvidenciaPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = C006tEvidenciaPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				C006tEvidenciaPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related J811tUsuarioRelatedByCoRegistra table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinJ811tUsuarioRelatedByCoRegistra(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related C003tActaAcc table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinC003tActaAcc(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related C004tActaAie table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinC004tActaAie(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J811tUsuarioRelatedByCoColecta table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinJ811tUsuarioRelatedByCoColecta(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J002tTipoEvidencia table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinJ002tTipoEvidencia(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J003tEstadoEvidencia table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinJ003tEstadoEvidencia(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J802tClasificacion table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinJ802tClasificacion(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related C801tTransaccion table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinC801tTransaccion(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J811tUsuarioRelatedByCoEntregadoFueraSti table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinJ811tUsuarioRelatedByCoEntregadoFueraSti(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J812PersonaRelatedByCoCustodio table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinJ812PersonaRelatedByCoCustodio(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J812PersonaRelatedByCoCreatedAt table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinJ812PersonaRelatedByCoCreatedAt(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J812PersonaRelatedByCoUpdatedAt table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinJ812PersonaRelatedByCoUpdatedAt(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);


    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their J811tUsuario objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinJ811tUsuarioRelatedByCoRegistra(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		J811tUsuarioPeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = J811tUsuarioPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoRegistra($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their C003tActaAcc objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinC003tActaAcc(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		C003tActaAccPeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = C003tActaAccPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = C003tActaAccPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					C003tActaAccPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (C003tActaAcc)
				$obj2->addC006tEvidencia($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their C004tActaAie objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinC004tActaAie(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		C004tActaAiePeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = C004tActaAiePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = C004tActaAiePeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					C004tActaAiePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (C004tActaAie)
				$obj2->addC006tEvidencia($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their J811tUsuario objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinJ811tUsuarioRelatedByCoColecta(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		J811tUsuarioPeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = J811tUsuarioPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoColecta($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their J002tTipoEvidencia objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinJ002tTipoEvidencia(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		J002tTipoEvidenciaPeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = J002tTipoEvidenciaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = J002tTipoEvidenciaPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (J002tTipoEvidencia)
				$obj2->addC006tEvidencia($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their J003tEstadoEvidencia objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinJ003tEstadoEvidencia(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		J003tEstadoEvidenciaPeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = J003tEstadoEvidenciaPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (J003tEstadoEvidencia)
				$obj2->addC006tEvidencia($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their J802tClasificacion objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinJ802tClasificacion(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		J802tClasificacionPeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = J802tClasificacionPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = J802tClasificacionPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					J802tClasificacionPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (J802tClasificacion)
				$obj2->addC006tEvidencia($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their C801tTransaccion objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinC801tTransaccion(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		C801tTransaccionPeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = C801tTransaccionPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = C801tTransaccionPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					C801tTransaccionPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (C801tTransaccion)
				$obj2->addC006tEvidencia($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their J811tUsuario objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinJ811tUsuarioRelatedByCoEntregadoFueraSti(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		J811tUsuarioPeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = J811tUsuarioPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoEntregadoFueraSti($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their J812Persona objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinJ812PersonaRelatedByCoCustodio(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		J812PersonaPeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = J812PersonaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = J812PersonaPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					J812PersonaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (J812Persona)
				$obj2->addC006tEvidenciaRelatedByCoCustodio($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their J812Persona objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinJ812PersonaRelatedByCoCreatedAt(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		J812PersonaPeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = J812PersonaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = J812PersonaPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					J812PersonaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (J812Persona)
				$obj2->addC006tEvidenciaRelatedByCoCreatedAt($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with their J812Persona objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinJ812PersonaRelatedByCoUpdatedAt(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);
		J812PersonaPeer::addSelectColumns($c);

		$c->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = J812PersonaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = J812PersonaPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					J812PersonaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to $obj2 (J812Persona)
				$obj2->addC006tEvidenciaRelatedByCoUpdatedAt($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(C006tEvidenciaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
		$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
		$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
		$criteria->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
		$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
		$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
		$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
		$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
		$criteria->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
		$criteria->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
		$criteria->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
		$criteria->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doSelectJoinAll:doSelectJoinAll') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol13 = $startcol12 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol14 = $startcol13 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		$c->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
		$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
		$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
		$c->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
		$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
		$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
		$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
		$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
		$c->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
		$c->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
		$c->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
		$c->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined J811tUsuario rows

			$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoRegistra($obj1);
			} // if joined row not null

			// Add objects for joined C003tActaAcc rows

			$key3 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = C003tActaAccPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C003tActaAccPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C003tActaAcc)
				$obj3->addC006tEvidencia($obj1);
			} // if joined row not null

			// Add objects for joined C004tActaAie rows

			$key4 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = C004tActaAiePeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					C004tActaAiePeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (C004tActaAie)
				$obj4->addC006tEvidencia($obj1);
			} // if joined row not null

			// Add objects for joined J811tUsuario rows

			$key5 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = J811tUsuarioPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J811tUsuarioPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J811tUsuario)
				$obj5->addC006tEvidenciaRelatedByCoColecta($obj1);
			} // if joined row not null

			// Add objects for joined J002tTipoEvidencia rows

			$key6 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = J002tTipoEvidenciaPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J002tTipoEvidencia)
				$obj6->addC006tEvidencia($obj1);
			} // if joined row not null

			// Add objects for joined J003tEstadoEvidencia rows

			$key7 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj7, $key7);
				} // if obj7 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (J003tEstadoEvidencia)
				$obj7->addC006tEvidencia($obj1);
			} // if joined row not null

			// Add objects for joined J802tClasificacion rows

			$key8 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = J802tClasificacionPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					J802tClasificacionPeer::addInstanceToPool($obj8, $key8);
				} // if obj8 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (J802tClasificacion)
				$obj8->addC006tEvidencia($obj1);
			} // if joined row not null

			// Add objects for joined C801tTransaccion rows

			$key9 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = C801tTransaccionPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					C801tTransaccionPeer::addInstanceToPool($obj9, $key9);
				} // if obj9 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (C801tTransaccion)
				$obj9->addC006tEvidencia($obj1);
			} // if joined row not null

			// Add objects for joined J811tUsuario rows

			$key10 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol10);
			if ($key10 !== null) {
				$obj10 = J811tUsuarioPeer::getInstanceFromPool($key10);
				if (!$obj10) {

					$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J811tUsuarioPeer::addInstanceToPool($obj10, $key10);
				} // if obj10 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J811tUsuario)
				$obj10->addC006tEvidenciaRelatedByCoEntregadoFueraSti($obj1);
			} // if joined row not null

			// Add objects for joined J812Persona rows

			$key11 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
			if ($key11 !== null) {
				$obj11 = J812PersonaPeer::getInstanceFromPool($key11);
				if (!$obj11) {

					$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					J812PersonaPeer::addInstanceToPool($obj11, $key11);
				} // if obj11 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj11 (J812Persona)
				$obj11->addC006tEvidenciaRelatedByCoCustodio($obj1);
			} // if joined row not null

			// Add objects for joined J812Persona rows

			$key12 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
			if ($key12 !== null) {
				$obj12 = J812PersonaPeer::getInstanceFromPool($key12);
				if (!$obj12) {

					$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					J812PersonaPeer::addInstanceToPool($obj12, $key12);
				} // if obj12 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj12 (J812Persona)
				$obj12->addC006tEvidenciaRelatedByCoCreatedAt($obj1);
			} // if joined row not null

			// Add objects for joined J812Persona rows

			$key13 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol13);
			if ($key13 !== null) {
				$obj13 = J812PersonaPeer::getInstanceFromPool($key13);
				if (!$obj13) {

					$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj13 = new $cls();
					$obj13->hydrate($row, $startcol13);
					J812PersonaPeer::addInstanceToPool($obj13, $key13);
				} // if obj13 loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj13 (J812Persona)
				$obj13->addC006tEvidenciaRelatedByCoUpdatedAt($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J811tUsuarioRelatedByCoRegistra table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptJ811tUsuarioRelatedByCoRegistra(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related C003tActaAcc table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptC003tActaAcc(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related C004tActaAie table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptC004tActaAie(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J811tUsuarioRelatedByCoColecta table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptJ811tUsuarioRelatedByCoColecta(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J002tTipoEvidencia table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptJ002tTipoEvidencia(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J003tEstadoEvidencia table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptJ003tEstadoEvidencia(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J802tClasificacion table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptJ802tClasificacion(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related C801tTransaccion table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptC801tTransaccion(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J811tUsuarioRelatedByCoEntregadoFueraSti table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptJ811tUsuarioRelatedByCoEntregadoFueraSti(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J812PersonaRelatedByCoCustodio table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptJ812PersonaRelatedByCoCustodio(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J812PersonaRelatedByCoCreatedAt table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptJ812PersonaRelatedByCoCreatedAt(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related J812PersonaRelatedByCoUpdatedAt table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptJ812PersonaRelatedByCoUpdatedAt(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			C006tEvidenciaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$criteria->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except J811tUsuarioRelatedByCoRegistra.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptJ811tUsuarioRelatedByCoRegistra(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doSelectJoinAllExcept:doSelectJoinAllExcept') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined C003tActaAcc rows

				$key2 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = C003tActaAccPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					C003tActaAccPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (C003tActaAcc)
				$obj2->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C004tActaAie rows

				$key3 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C004tActaAiePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C004tActaAiePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C004tActaAie)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J002tTipoEvidencia rows

				$key4 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = J002tTipoEvidenciaPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (J002tTipoEvidencia)
				$obj4->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J003tEstadoEvidencia rows

				$key5 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J003tEstadoEvidencia)
				$obj5->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J802tClasificacion rows

				$key6 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J802tClasificacionPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J802tClasificacionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J802tClasificacion)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C801tTransaccion rows

				$key7 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = C801tTransaccionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					C801tTransaccionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (C801tTransaccion)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key8 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = J812PersonaPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					J812PersonaPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (J812Persona)
				$obj8->addC006tEvidenciaRelatedByCoCustodio($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key9 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = J812PersonaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					J812PersonaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (J812Persona)
				$obj9->addC006tEvidenciaRelatedByCoCreatedAt($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key10 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J812PersonaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J812PersonaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J812Persona)
				$obj10->addC006tEvidenciaRelatedByCoUpdatedAt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except C003tActaAcc.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptC003tActaAcc(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol13 = $startcol12 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined J811tUsuario rows

				$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoRegistra($obj1);

			} // if joined row is not null

				// Add objects for joined C004tActaAie rows

				$key3 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C004tActaAiePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C004tActaAiePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C004tActaAie)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key4 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = J811tUsuarioPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					J811tUsuarioPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (J811tUsuario)
				$obj4->addC006tEvidenciaRelatedByCoColecta($obj1);

			} // if joined row is not null

				// Add objects for joined J002tTipoEvidencia rows

				$key5 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J002tTipoEvidenciaPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J002tTipoEvidencia)
				$obj5->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J003tEstadoEvidencia rows

				$key6 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J003tEstadoEvidencia)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J802tClasificacion rows

				$key7 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = J802tClasificacionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					J802tClasificacionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (J802tClasificacion)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C801tTransaccion rows

				$key8 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = C801tTransaccionPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					C801tTransaccionPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (C801tTransaccion)
				$obj8->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key9 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = J811tUsuarioPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					J811tUsuarioPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (J811tUsuario)
				$obj9->addC006tEvidenciaRelatedByCoEntregadoFueraSti($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key10 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J812PersonaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J812PersonaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J812Persona)
				$obj10->addC006tEvidenciaRelatedByCoCustodio($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key11 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = J812PersonaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					J812PersonaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj11 (J812Persona)
				$obj11->addC006tEvidenciaRelatedByCoCreatedAt($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key12 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = J812PersonaPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					J812PersonaPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj12 (J812Persona)
				$obj12->addC006tEvidenciaRelatedByCoUpdatedAt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except C004tActaAie.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptC004tActaAie(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol13 = $startcol12 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined J811tUsuario rows

				$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoRegistra($obj1);

			} // if joined row is not null

				// Add objects for joined C003tActaAcc rows

				$key3 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C003tActaAccPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C003tActaAccPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C003tActaAcc)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key4 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = J811tUsuarioPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					J811tUsuarioPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (J811tUsuario)
				$obj4->addC006tEvidenciaRelatedByCoColecta($obj1);

			} // if joined row is not null

				// Add objects for joined J002tTipoEvidencia rows

				$key5 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J002tTipoEvidenciaPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J002tTipoEvidencia)
				$obj5->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J003tEstadoEvidencia rows

				$key6 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J003tEstadoEvidencia)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J802tClasificacion rows

				$key7 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = J802tClasificacionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					J802tClasificacionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (J802tClasificacion)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C801tTransaccion rows

				$key8 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = C801tTransaccionPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					C801tTransaccionPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (C801tTransaccion)
				$obj8->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key9 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = J811tUsuarioPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					J811tUsuarioPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (J811tUsuario)
				$obj9->addC006tEvidenciaRelatedByCoEntregadoFueraSti($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key10 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J812PersonaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J812PersonaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J812Persona)
				$obj10->addC006tEvidenciaRelatedByCoCustodio($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key11 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = J812PersonaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					J812PersonaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj11 (J812Persona)
				$obj11->addC006tEvidenciaRelatedByCoCreatedAt($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key12 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = J812PersonaPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					J812PersonaPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj12 (J812Persona)
				$obj12->addC006tEvidenciaRelatedByCoUpdatedAt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except J811tUsuarioRelatedByCoColecta.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptJ811tUsuarioRelatedByCoColecta(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined C003tActaAcc rows

				$key2 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = C003tActaAccPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					C003tActaAccPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (C003tActaAcc)
				$obj2->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C004tActaAie rows

				$key3 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C004tActaAiePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C004tActaAiePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C004tActaAie)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J002tTipoEvidencia rows

				$key4 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = J002tTipoEvidenciaPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (J002tTipoEvidencia)
				$obj4->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J003tEstadoEvidencia rows

				$key5 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J003tEstadoEvidencia)
				$obj5->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J802tClasificacion rows

				$key6 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J802tClasificacionPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J802tClasificacionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J802tClasificacion)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C801tTransaccion rows

				$key7 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = C801tTransaccionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					C801tTransaccionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (C801tTransaccion)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key8 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = J812PersonaPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					J812PersonaPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (J812Persona)
				$obj8->addC006tEvidenciaRelatedByCoCustodio($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key9 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = J812PersonaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					J812PersonaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (J812Persona)
				$obj9->addC006tEvidenciaRelatedByCoCreatedAt($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key10 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J812PersonaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J812PersonaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J812Persona)
				$obj10->addC006tEvidenciaRelatedByCoUpdatedAt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except J002tTipoEvidencia.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptJ002tTipoEvidencia(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol13 = $startcol12 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined J811tUsuario rows

				$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoRegistra($obj1);

			} // if joined row is not null

				// Add objects for joined C003tActaAcc rows

				$key3 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C003tActaAccPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C003tActaAccPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C003tActaAcc)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C004tActaAie rows

				$key4 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = C004tActaAiePeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					C004tActaAiePeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (C004tActaAie)
				$obj4->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key5 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J811tUsuarioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J811tUsuarioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J811tUsuario)
				$obj5->addC006tEvidenciaRelatedByCoColecta($obj1);

			} // if joined row is not null

				// Add objects for joined J003tEstadoEvidencia rows

				$key6 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J003tEstadoEvidencia)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J802tClasificacion rows

				$key7 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = J802tClasificacionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					J802tClasificacionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (J802tClasificacion)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C801tTransaccion rows

				$key8 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = C801tTransaccionPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					C801tTransaccionPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (C801tTransaccion)
				$obj8->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key9 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = J811tUsuarioPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					J811tUsuarioPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (J811tUsuario)
				$obj9->addC006tEvidenciaRelatedByCoEntregadoFueraSti($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key10 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J812PersonaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J812PersonaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J812Persona)
				$obj10->addC006tEvidenciaRelatedByCoCustodio($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key11 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = J812PersonaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					J812PersonaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj11 (J812Persona)
				$obj11->addC006tEvidenciaRelatedByCoCreatedAt($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key12 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = J812PersonaPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					J812PersonaPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj12 (J812Persona)
				$obj12->addC006tEvidenciaRelatedByCoUpdatedAt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except J003tEstadoEvidencia.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptJ003tEstadoEvidencia(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol13 = $startcol12 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined J811tUsuario rows

				$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoRegistra($obj1);

			} // if joined row is not null

				// Add objects for joined C003tActaAcc rows

				$key3 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C003tActaAccPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C003tActaAccPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C003tActaAcc)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C004tActaAie rows

				$key4 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = C004tActaAiePeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					C004tActaAiePeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (C004tActaAie)
				$obj4->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key5 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J811tUsuarioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J811tUsuarioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J811tUsuario)
				$obj5->addC006tEvidenciaRelatedByCoColecta($obj1);

			} // if joined row is not null

				// Add objects for joined J002tTipoEvidencia rows

				$key6 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J002tTipoEvidenciaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J002tTipoEvidencia)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J802tClasificacion rows

				$key7 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = J802tClasificacionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					J802tClasificacionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (J802tClasificacion)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C801tTransaccion rows

				$key8 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = C801tTransaccionPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					C801tTransaccionPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (C801tTransaccion)
				$obj8->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key9 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = J811tUsuarioPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					J811tUsuarioPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (J811tUsuario)
				$obj9->addC006tEvidenciaRelatedByCoEntregadoFueraSti($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key10 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J812PersonaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J812PersonaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J812Persona)
				$obj10->addC006tEvidenciaRelatedByCoCustodio($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key11 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = J812PersonaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					J812PersonaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj11 (J812Persona)
				$obj11->addC006tEvidenciaRelatedByCoCreatedAt($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key12 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = J812PersonaPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					J812PersonaPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj12 (J812Persona)
				$obj12->addC006tEvidenciaRelatedByCoUpdatedAt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except J802tClasificacion.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptJ802tClasificacion(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol13 = $startcol12 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined J811tUsuario rows

				$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoRegistra($obj1);

			} // if joined row is not null

				// Add objects for joined C003tActaAcc rows

				$key3 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C003tActaAccPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C003tActaAccPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C003tActaAcc)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C004tActaAie rows

				$key4 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = C004tActaAiePeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					C004tActaAiePeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (C004tActaAie)
				$obj4->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key5 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J811tUsuarioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J811tUsuarioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J811tUsuario)
				$obj5->addC006tEvidenciaRelatedByCoColecta($obj1);

			} // if joined row is not null

				// Add objects for joined J002tTipoEvidencia rows

				$key6 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J002tTipoEvidenciaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J002tTipoEvidencia)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J003tEstadoEvidencia rows

				$key7 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (J003tEstadoEvidencia)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C801tTransaccion rows

				$key8 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = C801tTransaccionPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					C801tTransaccionPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (C801tTransaccion)
				$obj8->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key9 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = J811tUsuarioPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					J811tUsuarioPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (J811tUsuario)
				$obj9->addC006tEvidenciaRelatedByCoEntregadoFueraSti($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key10 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J812PersonaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J812PersonaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J812Persona)
				$obj10->addC006tEvidenciaRelatedByCoCustodio($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key11 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = J812PersonaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					J812PersonaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj11 (J812Persona)
				$obj11->addC006tEvidenciaRelatedByCoCreatedAt($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key12 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = J812PersonaPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					J812PersonaPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj12 (J812Persona)
				$obj12->addC006tEvidenciaRelatedByCoUpdatedAt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except C801tTransaccion.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptC801tTransaccion(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol13 = $startcol12 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined J811tUsuario rows

				$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoRegistra($obj1);

			} // if joined row is not null

				// Add objects for joined C003tActaAcc rows

				$key3 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C003tActaAccPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C003tActaAccPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C003tActaAcc)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C004tActaAie rows

				$key4 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = C004tActaAiePeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					C004tActaAiePeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (C004tActaAie)
				$obj4->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key5 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J811tUsuarioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J811tUsuarioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J811tUsuario)
				$obj5->addC006tEvidenciaRelatedByCoColecta($obj1);

			} // if joined row is not null

				// Add objects for joined J002tTipoEvidencia rows

				$key6 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J002tTipoEvidenciaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J002tTipoEvidencia)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J003tEstadoEvidencia rows

				$key7 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (J003tEstadoEvidencia)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J802tClasificacion rows

				$key8 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = J802tClasificacionPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					J802tClasificacionPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (J802tClasificacion)
				$obj8->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key9 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = J811tUsuarioPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					J811tUsuarioPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (J811tUsuario)
				$obj9->addC006tEvidenciaRelatedByCoEntregadoFueraSti($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key10 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J812PersonaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J812PersonaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J812Persona)
				$obj10->addC006tEvidenciaRelatedByCoCustodio($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key11 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = J812PersonaPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					J812PersonaPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj11 (J812Persona)
				$obj11->addC006tEvidenciaRelatedByCoCreatedAt($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key12 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol12);
				if ($key12 !== null) {
					$obj12 = J812PersonaPeer::getInstanceFromPool($key12);
					if (!$obj12) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					J812PersonaPeer::addInstanceToPool($obj12, $key12);
				} // if $obj12 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj12 (J812Persona)
				$obj12->addC006tEvidenciaRelatedByCoUpdatedAt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except J811tUsuarioRelatedByCoEntregadoFueraSti.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptJ811tUsuarioRelatedByCoEntregadoFueraSti(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

		J812PersonaPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J812PersonaPeer::NUM_COLUMNS - J812PersonaPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CUSTODIO,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CREATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_UPDATED_AT,), array(J812PersonaPeer::CO_PERSONA,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined C003tActaAcc rows

				$key2 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = C003tActaAccPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					C003tActaAccPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (C003tActaAcc)
				$obj2->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C004tActaAie rows

				$key3 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C004tActaAiePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C004tActaAiePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C004tActaAie)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J002tTipoEvidencia rows

				$key4 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = J002tTipoEvidenciaPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (J002tTipoEvidencia)
				$obj4->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J003tEstadoEvidencia rows

				$key5 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J003tEstadoEvidencia)
				$obj5->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J802tClasificacion rows

				$key6 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J802tClasificacionPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J802tClasificacionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J802tClasificacion)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C801tTransaccion rows

				$key7 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = C801tTransaccionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					C801tTransaccionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (C801tTransaccion)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key8 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = J812PersonaPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					J812PersonaPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (J812Persona)
				$obj8->addC006tEvidenciaRelatedByCoCustodio($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key9 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = J812PersonaPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					J812PersonaPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (J812Persona)
				$obj9->addC006tEvidenciaRelatedByCoCreatedAt($obj1);

			} // if joined row is not null

				// Add objects for joined J812Persona rows

				$key10 = J812PersonaPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J812PersonaPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J812PersonaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J812PersonaPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J812Persona)
				$obj10->addC006tEvidenciaRelatedByCoUpdatedAt($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except J812PersonaRelatedByCoCustodio.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptJ812PersonaRelatedByCoCustodio(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined J811tUsuario rows

				$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoRegistra($obj1);

			} // if joined row is not null

				// Add objects for joined C003tActaAcc rows

				$key3 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C003tActaAccPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C003tActaAccPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C003tActaAcc)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C004tActaAie rows

				$key4 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = C004tActaAiePeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					C004tActaAiePeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (C004tActaAie)
				$obj4->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key5 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J811tUsuarioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J811tUsuarioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J811tUsuario)
				$obj5->addC006tEvidenciaRelatedByCoColecta($obj1);

			} // if joined row is not null

				// Add objects for joined J002tTipoEvidencia rows

				$key6 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J002tTipoEvidenciaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J002tTipoEvidencia)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J003tEstadoEvidencia rows

				$key7 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (J003tEstadoEvidencia)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J802tClasificacion rows

				$key8 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = J802tClasificacionPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					J802tClasificacionPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (J802tClasificacion)
				$obj8->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C801tTransaccion rows

				$key9 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = C801tTransaccionPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					C801tTransaccionPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (C801tTransaccion)
				$obj9->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key10 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J811tUsuarioPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J811tUsuarioPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J811tUsuario)
				$obj10->addC006tEvidenciaRelatedByCoEntregadoFueraSti($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except J812PersonaRelatedByCoCreatedAt.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptJ812PersonaRelatedByCoCreatedAt(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined J811tUsuario rows

				$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoRegistra($obj1);

			} // if joined row is not null

				// Add objects for joined C003tActaAcc rows

				$key3 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C003tActaAccPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C003tActaAccPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C003tActaAcc)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C004tActaAie rows

				$key4 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = C004tActaAiePeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					C004tActaAiePeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (C004tActaAie)
				$obj4->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key5 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J811tUsuarioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J811tUsuarioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J811tUsuario)
				$obj5->addC006tEvidenciaRelatedByCoColecta($obj1);

			} // if joined row is not null

				// Add objects for joined J002tTipoEvidencia rows

				$key6 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J002tTipoEvidenciaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J002tTipoEvidencia)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J003tEstadoEvidencia rows

				$key7 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (J003tEstadoEvidencia)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J802tClasificacion rows

				$key8 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = J802tClasificacionPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					J802tClasificacionPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (J802tClasificacion)
				$obj8->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C801tTransaccion rows

				$key9 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = C801tTransaccionPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					C801tTransaccionPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (C801tTransaccion)
				$obj9->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key10 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J811tUsuarioPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J811tUsuarioPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J811tUsuario)
				$obj10->addC006tEvidenciaRelatedByCoEntregadoFueraSti($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of C006tEvidencia objects pre-filled with all related objects except J812PersonaRelatedByCoUpdatedAt.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of C006tEvidencia objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptJ812PersonaRelatedByCoUpdatedAt(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		C006tEvidenciaPeer::addSelectColumns($c);
		$startcol2 = (C006tEvidenciaPeer::NUM_COLUMNS - C006tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		C003tActaAccPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (C003tActaAccPeer::NUM_COLUMNS - C003tActaAccPeer::NUM_LAZY_LOAD_COLUMNS);

		C004tActaAiePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (C004tActaAiePeer::NUM_COLUMNS - C004tActaAiePeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

		J002tTipoEvidenciaPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (J002tTipoEvidenciaPeer::NUM_COLUMNS - J002tTipoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J003tEstadoEvidenciaPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (J003tEstadoEvidenciaPeer::NUM_COLUMNS - J003tEstadoEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS);

		J802tClasificacionPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (J802tClasificacionPeer::NUM_COLUMNS - J802tClasificacionPeer::NUM_LAZY_LOAD_COLUMNS);

		C801tTransaccionPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (C801tTransaccionPeer::NUM_COLUMNS - C801tTransaccionPeer::NUM_LAZY_LOAD_COLUMNS);

		J811tUsuarioPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (J811tUsuarioPeer::NUM_COLUMNS - J811tUsuarioPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(C006tEvidenciaPeer::CO_REGISTRA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ACC,), array(C003tActaAccPeer::CO_ACC,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_AIE,), array(C004tActaAiePeer::CO_AIE,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_COLECTA,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TIPO_EVIDENCIA,), array(J002tTipoEvidenciaPeer::CO_TIPO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ESTADO_EVIDENCIA,), array(J003tEstadoEvidenciaPeer::CO_ESTADO_EVIDENCIA,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_CLASIFICACION,), array(J802tClasificacionPeer::CO_CLASIFICACION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_TRANSACCION,), array(C801tTransaccionPeer::CO_TRANSACCION,), $join_behavior);
				$c->addJoin(array(C006tEvidenciaPeer::CO_ENTREGADO_FUERA_STI,), array(J811tUsuarioPeer::CO_USUARIO,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = C006tEvidenciaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = C006tEvidenciaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = C006tEvidenciaPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				C006tEvidenciaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined J811tUsuario rows

				$key2 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = J811tUsuarioPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					J811tUsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj2 (J811tUsuario)
				$obj2->addC006tEvidenciaRelatedByCoRegistra($obj1);

			} // if joined row is not null

				// Add objects for joined C003tActaAcc rows

				$key3 = C003tActaAccPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = C003tActaAccPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = C003tActaAccPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					C003tActaAccPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj3 (C003tActaAcc)
				$obj3->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C004tActaAie rows

				$key4 = C004tActaAiePeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = C004tActaAiePeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = C004tActaAiePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					C004tActaAiePeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj4 (C004tActaAie)
				$obj4->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key5 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = J811tUsuarioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					J811tUsuarioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj5 (J811tUsuario)
				$obj5->addC006tEvidenciaRelatedByCoColecta($obj1);

			} // if joined row is not null

				// Add objects for joined J002tTipoEvidencia rows

				$key6 = J002tTipoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = J002tTipoEvidenciaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = J002tTipoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					J002tTipoEvidenciaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj6 (J002tTipoEvidencia)
				$obj6->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J003tEstadoEvidencia rows

				$key7 = J003tEstadoEvidenciaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = J003tEstadoEvidenciaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = J003tEstadoEvidenciaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					J003tEstadoEvidenciaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj7 (J003tEstadoEvidencia)
				$obj7->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J802tClasificacion rows

				$key8 = J802tClasificacionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = J802tClasificacionPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = J802tClasificacionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					J802tClasificacionPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj8 (J802tClasificacion)
				$obj8->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined C801tTransaccion rows

				$key9 = C801tTransaccionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = C801tTransaccionPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = C801tTransaccionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					C801tTransaccionPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj9 (C801tTransaccion)
				$obj9->addC006tEvidencia($obj1);

			} // if joined row is not null

				// Add objects for joined J811tUsuario rows

				$key10 = J811tUsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = J811tUsuarioPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = J811tUsuarioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					J811tUsuarioPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (C006tEvidencia) to the collection in $obj10 (J811tUsuario)
				$obj10->addC006tEvidenciaRelatedByCoEntregadoFueraSti($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return C006tEvidenciaPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a C006tEvidencia or Criteria object.
	 *
	 * @param      mixed $values Criteria or C006tEvidencia object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseC006tEvidenciaPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from C006tEvidencia object
		}

		if ($criteria->containsKey(C006tEvidenciaPeer::CO_EVIDENCIA) && $criteria->keyContainsValue(C006tEvidenciaPeer::CO_EVIDENCIA) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.C006tEvidenciaPeer::CO_EVIDENCIA.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a C006tEvidencia or Criteria object.
	 *
	 * @param      mixed $values Criteria or C006tEvidencia object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseC006tEvidenciaPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(C006tEvidenciaPeer::CO_EVIDENCIA);
			$selectCriteria->add(C006tEvidenciaPeer::CO_EVIDENCIA, $criteria->remove(C006tEvidenciaPeer::CO_EVIDENCIA), $comparison);

		} else { // $values is C006tEvidencia object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseC006tEvidenciaPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseC006tEvidenciaPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the c006t_evidencia table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(C006tEvidenciaPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a C006tEvidencia or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or C006tEvidencia object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			C006tEvidenciaPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof C006tEvidencia) {
			// invalidate the cache for this single object
			C006tEvidenciaPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(C006tEvidenciaPeer::CO_EVIDENCIA, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				C006tEvidenciaPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given C006tEvidencia object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      C006tEvidencia $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(C006tEvidencia $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(C006tEvidenciaPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(C006tEvidenciaPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(C006tEvidenciaPeer::DATABASE_NAME, C006tEvidenciaPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = C006tEvidenciaPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      string $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     C006tEvidencia
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = C006tEvidenciaPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(C006tEvidenciaPeer::DATABASE_NAME);
		$criteria->add(C006tEvidenciaPeer::CO_EVIDENCIA, $pk);

		$v = C006tEvidenciaPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(C006tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(C006tEvidenciaPeer::DATABASE_NAME);
			$criteria->add(C006tEvidenciaPeer::CO_EVIDENCIA, $pks, Criteria::IN);
			$objs = C006tEvidenciaPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseC006tEvidenciaPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the C006tEvidenciaPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the C006tEvidenciaPeer class:
//
// Propel::getDatabaseMap(C006tEvidenciaPeer::DATABASE_NAME)->addTableBuilder(C006tEvidenciaPeer::TABLE_NAME, C006tEvidenciaPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseC006tEvidenciaPeer::DATABASE_NAME)->addTableBuilder(BaseC006tEvidenciaPeer::TABLE_NAME, BaseC006tEvidenciaPeer::getMapBuilder());

