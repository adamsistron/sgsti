<?php

/**
 * Base class that represents a row from the 'c005t_evidencia' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Thu Oct  1 13:19:45 2015
 *
 * @package    lib.model.om
 */
abstract class BaseC005tEvidencia extends BaseObject  implements Persistent {


  const PEER = 'C005tEvidenciaPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        C005tEvidenciaPeer
	 */
	protected static $peer;

	/**
	 * The value for the co_evidencia field.
	 * @var        string
	 */
	protected $co_evidencia;

	/**
	 * The value for the fe_registro field.
	 * @var        string
	 */
	protected $fe_registro;

	/**
	 * The value for the co_registro field.
	 * @var        string
	 */
	protected $co_registro;

	/**
	 * The value for the co_acc field.
	 * @var        string
	 */
	protected $co_acc;

	/**
	 * The value for the co_aie field.
	 * @var        string
	 */
	protected $co_aie;

	/**
	 * The value for the tx_descripcion_coleccion field.
	 * @var        string
	 */
	protected $tx_descripcion_coleccion;

	/**
	 * The value for the fe_coleccion_evidencia field.
	 * @var        string
	 */
	protected $fe_coleccion_evidencia;

	/**
	 * The value for the co_colecta field.
	 * @var        string
	 */
	protected $co_colecta;

	/**
	 * The value for the co_recurso field.
	 * @var        string
	 */
	protected $co_recurso;

	/**
	 * The value for the tx_nombre_recurso field.
	 * @var        string
	 */
	protected $tx_nombre_recurso;

	/**
	 * The value for the tx_serial_recurso field.
	 * @var        string
	 */
	protected $tx_serial_recurso;

	/**
	 * The value for the tx_marca_recurso field.
	 * @var        string
	 */
	protected $tx_marca_recurso;

	/**
	 * The value for the tx_modelo_recurso field.
	 * @var        string
	 */
	protected $tx_modelo_recurso;

	/**
	 * The value for the tx_numero_activo field.
	 * @var        string
	 */
	protected $tx_numero_activo;

	/**
	 * The value for the co_tipo_evidencia field.
	 * @var        string
	 */
	protected $co_tipo_evidencia;

	/**
	 * The value for the co_estado_evidencia field.
	 * @var        string
	 */
	protected $co_estado_evidencia;

	/**
	 * The value for the co_lugar_seguro field.
	 * @var        string
	 */
	protected $co_lugar_seguro;

	/**
	 * The value for the co_repositorio field.
	 * @var        string
	 */
	protected $co_repositorio;

	/**
	 * The value for the co_custodio_sti field.
	 * @var        string
	 */
	protected $co_custodio_sti;

	/**
	 * The value for the tx_observaciones field.
	 * @var        string
	 */
	protected $tx_observaciones;

	/**
	 * The value for the tx_clasificacion field.
	 * @var        string
	 */
	protected $tx_clasificacion;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseC005tEvidencia object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [co_evidencia] column value.
	 * 
	 * @return     string
	 */
	public function getCoEvidencia()
	{
		return $this->co_evidencia;
	}

	/**
	 * Get the [optionally formatted] temporal [fe_registro] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFeRegistro($format = 'Y-m-d')
	{
		if ($this->fe_registro === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->fe_registro);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fe_registro, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [co_registro] column value.
	 * 
	 * @return     string
	 */
	public function getCoRegistro()
	{
		return $this->co_registro;
	}

	/**
	 * Get the [co_acc] column value.
	 * 
	 * @return     string
	 */
	public function getCoAcc()
	{
		return $this->co_acc;
	}

	/**
	 * Get the [co_aie] column value.
	 * 
	 * @return     string
	 */
	public function getCoAie()
	{
		return $this->co_aie;
	}

	/**
	 * Get the [tx_descripcion_coleccion] column value.
	 * 
	 * @return     string
	 */
	public function getTxDescripcionColeccion()
	{
		return $this->tx_descripcion_coleccion;
	}

	/**
	 * Get the [optionally formatted] temporal [fe_coleccion_evidencia] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFeColeccionEvidencia($format = 'Y-m-d')
	{
		if ($this->fe_coleccion_evidencia === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->fe_coleccion_evidencia);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fe_coleccion_evidencia, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [co_colecta] column value.
	 * 
	 * @return     string
	 */
	public function getCoColecta()
	{
		return $this->co_colecta;
	}

	/**
	 * Get the [co_recurso] column value.
	 * 
	 * @return     string
	 */
	public function getCoRecurso()
	{
		return $this->co_recurso;
	}

	/**
	 * Get the [tx_nombre_recurso] column value.
	 * 
	 * @return     string
	 */
	public function getTxNombreRecurso()
	{
		return $this->tx_nombre_recurso;
	}

	/**
	 * Get the [tx_serial_recurso] column value.
	 * 
	 * @return     string
	 */
	public function getTxSerialRecurso()
	{
		return $this->tx_serial_recurso;
	}

	/**
	 * Get the [tx_marca_recurso] column value.
	 * 
	 * @return     string
	 */
	public function getTxMarcaRecurso()
	{
		return $this->tx_marca_recurso;
	}

	/**
	 * Get the [tx_modelo_recurso] column value.
	 * 
	 * @return     string
	 */
	public function getTxModeloRecurso()
	{
		return $this->tx_modelo_recurso;
	}

	/**
	 * Get the [tx_numero_activo] column value.
	 * 
	 * @return     string
	 */
	public function getTxNumeroActivo()
	{
		return $this->tx_numero_activo;
	}

	/**
	 * Get the [co_tipo_evidencia] column value.
	 * 
	 * @return     string
	 */
	public function getCoTipoEvidencia()
	{
		return $this->co_tipo_evidencia;
	}

	/**
	 * Get the [co_estado_evidencia] column value.
	 * 
	 * @return     string
	 */
	public function getCoEstadoEvidencia()
	{
		return $this->co_estado_evidencia;
	}

	/**
	 * Get the [co_lugar_seguro] column value.
	 * 
	 * @return     string
	 */
	public function getCoLugarSeguro()
	{
		return $this->co_lugar_seguro;
	}

	/**
	 * Get the [co_repositorio] column value.
	 * 
	 * @return     string
	 */
	public function getCoRepositorio()
	{
		return $this->co_repositorio;
	}

	/**
	 * Get the [co_custodio_sti] column value.
	 * 
	 * @return     string
	 */
	public function getCoCustodioSti()
	{
		return $this->co_custodio_sti;
	}

	/**
	 * Get the [tx_observaciones] column value.
	 * 
	 * @return     string
	 */
	public function getTxObservaciones()
	{
		return $this->tx_observaciones;
	}

	/**
	 * Get the [tx_clasificacion] column value.
	 * 
	 * @return     string
	 */
	public function getTxClasificacion()
	{
		return $this->tx_clasificacion;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Set the value of [co_evidencia] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setCoEvidencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_evidencia !== $v) {
			$this->co_evidencia = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::CO_EVIDENCIA;
		}

		return $this;
	} // setCoEvidencia()

	/**
	 * Sets the value of [fe_registro] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setFeRegistro($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fe_registro !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fe_registro !== null && $tmpDt = new DateTime($this->fe_registro)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fe_registro = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = C005tEvidenciaPeer::FE_REGISTRO;
			}
		} // if either are not null

		return $this;
	} // setFeRegistro()

	/**
	 * Set the value of [co_registro] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setCoRegistro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_registro !== $v) {
			$this->co_registro = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::CO_REGISTRO;
		}

		return $this;
	} // setCoRegistro()

	/**
	 * Set the value of [co_acc] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setCoAcc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_acc !== $v) {
			$this->co_acc = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::CO_ACC;
		}

		return $this;
	} // setCoAcc()

	/**
	 * Set the value of [co_aie] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setCoAie($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_aie !== $v) {
			$this->co_aie = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::CO_AIE;
		}

		return $this;
	} // setCoAie()

	/**
	 * Set the value of [tx_descripcion_coleccion] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setTxDescripcionColeccion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_descripcion_coleccion !== $v) {
			$this->tx_descripcion_coleccion = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::TX_DESCRIPCION_COLECCION;
		}

		return $this;
	} // setTxDescripcionColeccion()

	/**
	 * Sets the value of [fe_coleccion_evidencia] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setFeColeccionEvidencia($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fe_coleccion_evidencia !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fe_coleccion_evidencia !== null && $tmpDt = new DateTime($this->fe_coleccion_evidencia)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fe_coleccion_evidencia = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = C005tEvidenciaPeer::FE_COLECCION_EVIDENCIA;
			}
		} // if either are not null

		return $this;
	} // setFeColeccionEvidencia()

	/**
	 * Set the value of [co_colecta] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setCoColecta($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_colecta !== $v) {
			$this->co_colecta = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::CO_COLECTA;
		}

		return $this;
	} // setCoColecta()

	/**
	 * Set the value of [co_recurso] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setCoRecurso($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_recurso !== $v) {
			$this->co_recurso = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::CO_RECURSO;
		}

		return $this;
	} // setCoRecurso()

	/**
	 * Set the value of [tx_nombre_recurso] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setTxNombreRecurso($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_nombre_recurso !== $v) {
			$this->tx_nombre_recurso = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::TX_NOMBRE_RECURSO;
		}

		return $this;
	} // setTxNombreRecurso()

	/**
	 * Set the value of [tx_serial_recurso] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setTxSerialRecurso($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_serial_recurso !== $v) {
			$this->tx_serial_recurso = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::TX_SERIAL_RECURSO;
		}

		return $this;
	} // setTxSerialRecurso()

	/**
	 * Set the value of [tx_marca_recurso] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setTxMarcaRecurso($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_marca_recurso !== $v) {
			$this->tx_marca_recurso = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::TX_MARCA_RECURSO;
		}

		return $this;
	} // setTxMarcaRecurso()

	/**
	 * Set the value of [tx_modelo_recurso] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setTxModeloRecurso($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_modelo_recurso !== $v) {
			$this->tx_modelo_recurso = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::TX_MODELO_RECURSO;
		}

		return $this;
	} // setTxModeloRecurso()

	/**
	 * Set the value of [tx_numero_activo] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setTxNumeroActivo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_numero_activo !== $v) {
			$this->tx_numero_activo = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::TX_NUMERO_ACTIVO;
		}

		return $this;
	} // setTxNumeroActivo()

	/**
	 * Set the value of [co_tipo_evidencia] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setCoTipoEvidencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_tipo_evidencia !== $v) {
			$this->co_tipo_evidencia = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::CO_TIPO_EVIDENCIA;
		}

		return $this;
	} // setCoTipoEvidencia()

	/**
	 * Set the value of [co_estado_evidencia] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setCoEstadoEvidencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_estado_evidencia !== $v) {
			$this->co_estado_evidencia = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::CO_ESTADO_EVIDENCIA;
		}

		return $this;
	} // setCoEstadoEvidencia()

	/**
	 * Set the value of [co_lugar_seguro] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setCoLugarSeguro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_lugar_seguro !== $v) {
			$this->co_lugar_seguro = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::CO_LUGAR_SEGURO;
		}

		return $this;
	} // setCoLugarSeguro()

	/**
	 * Set the value of [co_repositorio] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setCoRepositorio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_repositorio !== $v) {
			$this->co_repositorio = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::CO_REPOSITORIO;
		}

		return $this;
	} // setCoRepositorio()

	/**
	 * Set the value of [co_custodio_sti] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setCoCustodioSti($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->co_custodio_sti !== $v) {
			$this->co_custodio_sti = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::CO_CUSTODIO_STI;
		}

		return $this;
	} // setCoCustodioSti()

	/**
	 * Set the value of [tx_observaciones] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setTxObservaciones($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_observaciones !== $v) {
			$this->tx_observaciones = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::TX_OBSERVACIONES;
		}

		return $this;
	} // setTxObservaciones()

	/**
	 * Set the value of [tx_clasificacion] column.
	 * 
	 * @param      string $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setTxClasificacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tx_clasificacion !== $v) {
			$this->tx_clasificacion = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::TX_CLASIFICACION;
		}

		return $this;
	} // setTxClasificacion()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     C005tEvidencia The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = C005tEvidenciaPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->co_evidencia = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->fe_registro = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->co_registro = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->co_acc = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->co_aie = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->tx_descripcion_coleccion = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->fe_coleccion_evidencia = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->co_colecta = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->co_recurso = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->tx_nombre_recurso = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->tx_serial_recurso = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->tx_marca_recurso = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->tx_modelo_recurso = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->tx_numero_activo = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->co_tipo_evidencia = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->co_estado_evidencia = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->co_lugar_seguro = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->co_repositorio = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->co_custodio_sti = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->tx_observaciones = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->tx_clasificacion = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->id = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 22; // 22 = C005tEvidenciaPeer::NUM_COLUMNS - C005tEvidenciaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating C005tEvidencia object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(C005tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = C005tEvidenciaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseC005tEvidencia:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(C005tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			C005tEvidenciaPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseC005tEvidencia:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseC005tEvidencia:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(C005tEvidenciaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseC005tEvidencia:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			C005tEvidenciaPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = C005tEvidenciaPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = C005tEvidenciaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += C005tEvidenciaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = C005tEvidenciaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = C005tEvidenciaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCoEvidencia();
				break;
			case 1:
				return $this->getFeRegistro();
				break;
			case 2:
				return $this->getCoRegistro();
				break;
			case 3:
				return $this->getCoAcc();
				break;
			case 4:
				return $this->getCoAie();
				break;
			case 5:
				return $this->getTxDescripcionColeccion();
				break;
			case 6:
				return $this->getFeColeccionEvidencia();
				break;
			case 7:
				return $this->getCoColecta();
				break;
			case 8:
				return $this->getCoRecurso();
				break;
			case 9:
				return $this->getTxNombreRecurso();
				break;
			case 10:
				return $this->getTxSerialRecurso();
				break;
			case 11:
				return $this->getTxMarcaRecurso();
				break;
			case 12:
				return $this->getTxModeloRecurso();
				break;
			case 13:
				return $this->getTxNumeroActivo();
				break;
			case 14:
				return $this->getCoTipoEvidencia();
				break;
			case 15:
				return $this->getCoEstadoEvidencia();
				break;
			case 16:
				return $this->getCoLugarSeguro();
				break;
			case 17:
				return $this->getCoRepositorio();
				break;
			case 18:
				return $this->getCoCustodioSti();
				break;
			case 19:
				return $this->getTxObservaciones();
				break;
			case 20:
				return $this->getTxClasificacion();
				break;
			case 21:
				return $this->getId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = C005tEvidenciaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCoEvidencia(),
			$keys[1] => $this->getFeRegistro(),
			$keys[2] => $this->getCoRegistro(),
			$keys[3] => $this->getCoAcc(),
			$keys[4] => $this->getCoAie(),
			$keys[5] => $this->getTxDescripcionColeccion(),
			$keys[6] => $this->getFeColeccionEvidencia(),
			$keys[7] => $this->getCoColecta(),
			$keys[8] => $this->getCoRecurso(),
			$keys[9] => $this->getTxNombreRecurso(),
			$keys[10] => $this->getTxSerialRecurso(),
			$keys[11] => $this->getTxMarcaRecurso(),
			$keys[12] => $this->getTxModeloRecurso(),
			$keys[13] => $this->getTxNumeroActivo(),
			$keys[14] => $this->getCoTipoEvidencia(),
			$keys[15] => $this->getCoEstadoEvidencia(),
			$keys[16] => $this->getCoLugarSeguro(),
			$keys[17] => $this->getCoRepositorio(),
			$keys[18] => $this->getCoCustodioSti(),
			$keys[19] => $this->getTxObservaciones(),
			$keys[20] => $this->getTxClasificacion(),
			$keys[21] => $this->getId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = C005tEvidenciaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCoEvidencia($value);
				break;
			case 1:
				$this->setFeRegistro($value);
				break;
			case 2:
				$this->setCoRegistro($value);
				break;
			case 3:
				$this->setCoAcc($value);
				break;
			case 4:
				$this->setCoAie($value);
				break;
			case 5:
				$this->setTxDescripcionColeccion($value);
				break;
			case 6:
				$this->setFeColeccionEvidencia($value);
				break;
			case 7:
				$this->setCoColecta($value);
				break;
			case 8:
				$this->setCoRecurso($value);
				break;
			case 9:
				$this->setTxNombreRecurso($value);
				break;
			case 10:
				$this->setTxSerialRecurso($value);
				break;
			case 11:
				$this->setTxMarcaRecurso($value);
				break;
			case 12:
				$this->setTxModeloRecurso($value);
				break;
			case 13:
				$this->setTxNumeroActivo($value);
				break;
			case 14:
				$this->setCoTipoEvidencia($value);
				break;
			case 15:
				$this->setCoEstadoEvidencia($value);
				break;
			case 16:
				$this->setCoLugarSeguro($value);
				break;
			case 17:
				$this->setCoRepositorio($value);
				break;
			case 18:
				$this->setCoCustodioSti($value);
				break;
			case 19:
				$this->setTxObservaciones($value);
				break;
			case 20:
				$this->setTxClasificacion($value);
				break;
			case 21:
				$this->setId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = C005tEvidenciaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCoEvidencia($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFeRegistro($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCoRegistro($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCoAcc($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCoAie($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTxDescripcionColeccion($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFeColeccionEvidencia($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCoColecta($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCoRecurso($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTxNombreRecurso($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setTxSerialRecurso($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setTxMarcaRecurso($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTxModeloRecurso($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setTxNumeroActivo($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCoTipoEvidencia($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCoEstadoEvidencia($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCoLugarSeguro($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCoRepositorio($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCoCustodioSti($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setTxObservaciones($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setTxClasificacion($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setId($arr[$keys[21]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(C005tEvidenciaPeer::DATABASE_NAME);

		if ($this->isColumnModified(C005tEvidenciaPeer::CO_EVIDENCIA)) $criteria->add(C005tEvidenciaPeer::CO_EVIDENCIA, $this->co_evidencia);
		if ($this->isColumnModified(C005tEvidenciaPeer::FE_REGISTRO)) $criteria->add(C005tEvidenciaPeer::FE_REGISTRO, $this->fe_registro);
		if ($this->isColumnModified(C005tEvidenciaPeer::CO_REGISTRO)) $criteria->add(C005tEvidenciaPeer::CO_REGISTRO, $this->co_registro);
		if ($this->isColumnModified(C005tEvidenciaPeer::CO_ACC)) $criteria->add(C005tEvidenciaPeer::CO_ACC, $this->co_acc);
		if ($this->isColumnModified(C005tEvidenciaPeer::CO_AIE)) $criteria->add(C005tEvidenciaPeer::CO_AIE, $this->co_aie);
		if ($this->isColumnModified(C005tEvidenciaPeer::TX_DESCRIPCION_COLECCION)) $criteria->add(C005tEvidenciaPeer::TX_DESCRIPCION_COLECCION, $this->tx_descripcion_coleccion);
		if ($this->isColumnModified(C005tEvidenciaPeer::FE_COLECCION_EVIDENCIA)) $criteria->add(C005tEvidenciaPeer::FE_COLECCION_EVIDENCIA, $this->fe_coleccion_evidencia);
		if ($this->isColumnModified(C005tEvidenciaPeer::CO_COLECTA)) $criteria->add(C005tEvidenciaPeer::CO_COLECTA, $this->co_colecta);
		if ($this->isColumnModified(C005tEvidenciaPeer::CO_RECURSO)) $criteria->add(C005tEvidenciaPeer::CO_RECURSO, $this->co_recurso);
		if ($this->isColumnModified(C005tEvidenciaPeer::TX_NOMBRE_RECURSO)) $criteria->add(C005tEvidenciaPeer::TX_NOMBRE_RECURSO, $this->tx_nombre_recurso);
		if ($this->isColumnModified(C005tEvidenciaPeer::TX_SERIAL_RECURSO)) $criteria->add(C005tEvidenciaPeer::TX_SERIAL_RECURSO, $this->tx_serial_recurso);
		if ($this->isColumnModified(C005tEvidenciaPeer::TX_MARCA_RECURSO)) $criteria->add(C005tEvidenciaPeer::TX_MARCA_RECURSO, $this->tx_marca_recurso);
		if ($this->isColumnModified(C005tEvidenciaPeer::TX_MODELO_RECURSO)) $criteria->add(C005tEvidenciaPeer::TX_MODELO_RECURSO, $this->tx_modelo_recurso);
		if ($this->isColumnModified(C005tEvidenciaPeer::TX_NUMERO_ACTIVO)) $criteria->add(C005tEvidenciaPeer::TX_NUMERO_ACTIVO, $this->tx_numero_activo);
		if ($this->isColumnModified(C005tEvidenciaPeer::CO_TIPO_EVIDENCIA)) $criteria->add(C005tEvidenciaPeer::CO_TIPO_EVIDENCIA, $this->co_tipo_evidencia);
		if ($this->isColumnModified(C005tEvidenciaPeer::CO_ESTADO_EVIDENCIA)) $criteria->add(C005tEvidenciaPeer::CO_ESTADO_EVIDENCIA, $this->co_estado_evidencia);
		if ($this->isColumnModified(C005tEvidenciaPeer::CO_LUGAR_SEGURO)) $criteria->add(C005tEvidenciaPeer::CO_LUGAR_SEGURO, $this->co_lugar_seguro);
		if ($this->isColumnModified(C005tEvidenciaPeer::CO_REPOSITORIO)) $criteria->add(C005tEvidenciaPeer::CO_REPOSITORIO, $this->co_repositorio);
		if ($this->isColumnModified(C005tEvidenciaPeer::CO_CUSTODIO_STI)) $criteria->add(C005tEvidenciaPeer::CO_CUSTODIO_STI, $this->co_custodio_sti);
		if ($this->isColumnModified(C005tEvidenciaPeer::TX_OBSERVACIONES)) $criteria->add(C005tEvidenciaPeer::TX_OBSERVACIONES, $this->tx_observaciones);
		if ($this->isColumnModified(C005tEvidenciaPeer::TX_CLASIFICACION)) $criteria->add(C005tEvidenciaPeer::TX_CLASIFICACION, $this->tx_clasificacion);
		if ($this->isColumnModified(C005tEvidenciaPeer::ID)) $criteria->add(C005tEvidenciaPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(C005tEvidenciaPeer::DATABASE_NAME);

		$criteria->add(C005tEvidenciaPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of C005tEvidencia (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFeRegistro($this->fe_registro);

		$copyObj->setCoRegistro($this->co_registro);

		$copyObj->setCoAcc($this->co_acc);

		$copyObj->setCoAie($this->co_aie);

		$copyObj->setTxDescripcionColeccion($this->tx_descripcion_coleccion);

		$copyObj->setFeColeccionEvidencia($this->fe_coleccion_evidencia);

		$copyObj->setCoColecta($this->co_colecta);

		$copyObj->setCoRecurso($this->co_recurso);

		$copyObj->setTxNombreRecurso($this->tx_nombre_recurso);

		$copyObj->setTxSerialRecurso($this->tx_serial_recurso);

		$copyObj->setTxMarcaRecurso($this->tx_marca_recurso);

		$copyObj->setTxModeloRecurso($this->tx_modelo_recurso);

		$copyObj->setTxNumeroActivo($this->tx_numero_activo);

		$copyObj->setCoTipoEvidencia($this->co_tipo_evidencia);

		$copyObj->setCoEstadoEvidencia($this->co_estado_evidencia);

		$copyObj->setCoLugarSeguro($this->co_lugar_seguro);

		$copyObj->setCoRepositorio($this->co_repositorio);

		$copyObj->setCoCustodioSti($this->co_custodio_sti);

		$copyObj->setTxObservaciones($this->tx_observaciones);

		$copyObj->setTxClasificacion($this->tx_clasificacion);


		$copyObj->setNew(true);

		$copyObj->setCoEvidencia(NULL); // this is a auto-increment column, so set to default value

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     C005tEvidencia Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     C005tEvidenciaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new C005tEvidenciaPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseC005tEvidencia:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseC005tEvidencia::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseC005tEvidencia
